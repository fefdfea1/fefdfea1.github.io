{"componentChunkName":"component---src-templates-blog-template-js","path":"/typescript-html/","result":{"data":{"cur":{"id":"fd2c3141-1c2a-5cbc-a1b1-2e3df012a980","html":"<h1 id=\"타입스크립트로-html-조작\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-html-%EC%A1%B0%EC%9E%91\" aria-label=\"타입스크립트로 html 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트로 HTML 조작</h1>\n<p>이번 포스팅은 타입스크립트로 HTML을 조작하는 방법에 대해 포스팅을 진행하겠다.</p>","excerpt":"타입스크립트로 HTML 조작 이번 포스팅은 타입스크립트로 HTML을 조작하는 방법에 대해 포스팅을 진행하겠다.","frontmatter":{"date":"June 01, 2024","title":"TypeScript HTML조작법","categories":"Typescript","author":"fefdfea","emoji":"👻"},"fields":{"slug":"/typescript-html/"}},"next":{"id":"00ce6c0f-c0ce-5429-a4ac-c9d2f095edcf","html":"<h1 id=\"class-생성시-타입-지정방법\" style=\"position:relative;\"><a href=\"#class-%EC%83%9D%EC%84%B1%EC%8B%9C-%ED%83%80%EC%9E%85-%EC%A7%80%EC%A0%95%EB%B0%A9%EB%B2%95\" aria-label=\"class 생성시 타입 지정방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>class 생성시 타입 지정방법</h1>\n<p>이번 포스팅은 class를 생성할때 타입스크립트로 타입을 지정하는 방법에 대해 알아보겠다. 자바를 사용해본 사람이라면 마치 자바를 쓰는 것 같은 느낌을 받을 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드와 같이 constructor에 this.객체이름 = 값을 지정하기 전 위에서 해당 변수의 존재를 알려주어야 하는데 이 부분이 굉장히 자바와 흡사한 면을 가지고 있다. 그래서 자바를 익힌 사람이라면 어렵지 않게 익숙해질 수 있을것이다. 하지만 익히지 않은 사람이라면 이것을 기억하자 <strong>constructor를 사용할때는 반드시 constructor 이전에 변수의 존재와 변수의 타입을 알려야한다</strong></p>\n<h3 id=\"클래스에서-매개변수-자리에-타입을-지정하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%9E%90%EB%A6%AC%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"클래스에서 매개변수 자리에 타입을 지정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스에서 매개변수 자리에 타입을 지정하기</h3>\n<p>위에서는 아무런 매개변수를 가지지 않고 고정된 값을 가지는 변수 하나만을 만들어 보았다 이번에는 매개변수를 이용하여 유동적인 클래스를 제작하고 타입을 지정해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">변수<span class=\"token number\">1</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> 변수<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>고정값과 constructor ()안에 매개변수의 이름을 정하고 : 옆에 타입을 정하면 위의 코드에서 처럼 타입을 지정해줄 수 있으며 기존에 “kim”으로 고정값으로 들어가는 자리를 변수1로 변경함으로서 이제 해당 클래스는 유동적으로 값을 생성 할 수 있게 되었다. 심지어 타입을 지정하여 원치 않는 값이 들어가는 것을 막아 더욱 안전해졌다.</p>","frontmatter":{"date":"June 01, 2024","title":"class를 만들때 타입지정하는 방법","categories":"Typescript","author":"fefdfea","emoji":"😺"},"fields":{"slug":"/typescript-class/"}},"prev":{"id":"4294e98b-1c29-5ccd-8c63-2e25b0799005","html":"<h1 id=\"타입스크립트의-타입-확정\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85-%ED%99%95%EC%A0%95\" aria-label=\"타입스크립트의 타입 확정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 타입 확정</h1>\n<p>타입스크립트에서는 타입을 확정하기 위한 방법이 존재한다. 이러한 방법 2가지를 Narrowing과 Assertion으로 부르는데 이번에는 이 2가지에 대해 알아보도록 하자</p>\n<h2 id=\"타입을-설정한-대로-인식하게-하는-assertion\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C-%EB%8C%80%EB%A1%9C-%EC%9D%B8%EC%8B%9D%ED%95%98%EA%B2%8C-%ED%95%98%EB%8A%94-assertion\" aria-label=\"타입을 설정한 대로 인식하게 하는 assertion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입을 설정한 대로 인식하게 하는 Assertion</h2>\n<p>Assertion은 타입을 다른 타입으로 변경하는 것이 아닌 이 타입으로 생각해라~ 라는 의미이다. 즉 string 타입을 number로 Assertion한다고 number로 바뀌는 것은 아니라는 의미이다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\r\n    <span class=\"token literal-property property\">bas</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Foo<span class=\"token punctuation\">;</span>\r\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\r\nfoo<span class=\"token punctuation\">.</span>bas <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음 코드를 보면 as를 통해 foo의 타입을 Foo로 타입 표명하여 foo.bar, foo.bas로 접근하여 값을 수정할 수 있게 되었다 원래는 해당 방법 없이 foo에 접근하려 하면 bar와 bas가 없다는 오류를 발생시킨다.</p>\n<p>이처럼 as는 타입을 사용하여 일시적으로 해당 타입으로 인식시키는 것이 가능하지만 이를 너무 악용할시 타입스크립트를 사용하는 의미가 없어질 수도 있으니 주의해서 사용해야한다!</p>\n<h2 id=\"타입의-범위를-줄이는-narrowing\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%9D%98-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%A4%84%EC%9D%B4%EB%8A%94-narrowing\" aria-label=\"타입의 범위를 줄이는 narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입의 범위를 줄이는 Narrowing</h2>\n<p>Narrowing은 타입을 확정하기도 하지만 더 정확히는 타입의 범위를 줄인다고 표현하는게 맞는 표현이며 Narrowing으로 범위를 줄이는방법은 많은데 이번 포스팅에서 5가지 정도의 방법을 알아보겠다.</p>\n<h3 id=\"조건문을-이용한-방법\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"조건문을 이용한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문을 이용한 방법</h3>\n<p>조건문을 이용한 방법은 if 문을 이용하여 타입의 벙위를 좁히는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 타입이 있다고 가정하였을때 legs라는 값에 + 1을 하면 undefined 타입이 존재하여 +연산을 할 수 없다. 그래서 이를 해결하기 위해 if문으로 legs가 undefined가 아닐때 +연산을 진행하도록 할 수 있는데 이것이 조건문을 이용한 Narrowing이다 해당 방법을 통하여 undefined말고 null 또한 해결이 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addLeg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">animal</span><span class=\"token operator\">:</span> Animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span>legs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    animal<span class=\"token punctuation\">.</span>legs <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">.</span>legs <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"typeof를-이용하여-타입을-체크하는-방법\" style=\"position:relative;\"><a href=\"#typeof%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%83%80%EC%9E%85%EC%9D%84-%EC%B2%B4%ED%81%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"typeof를 이용하여 타입을 체크하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof를 이용하여 타입을 체크하는 방법</h3>\n<p>typeof는 왼쪽의 갑을 오른쪽의 타입과 비교해주는 키워드이다 바로 코드를 보면서 이해해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// item이 string 타입</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> item <span class=\"token operator\">+</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// item이 number 타입</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 item은 string과 number 둘다 허용하고 있지만 typeof로 string 타입과 같을때만 true를 반환하고 if문을 통과할 수 있어 타입의 범위를 줄일 수 있다.</p>\n<h3 id=\"instanceof를-이용한-방법\" style=\"position:relative;\"><a href=\"#instanceof%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"instanceof를 이용한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>instanceof를 이용한 방법</h3>\n<p>instanceof는 객체가 Class에 속하거나 class의 인스턴스인지를 확인하는 방법으로 만약 한 타입에 2가지의 클래스를 가질 수 있는 타입이라고 하면 instanceof를 사용 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\r\n        <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> string</span>\r\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Organisation</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\ntype Contact <span class=\"token operator\">=</span> Person <span class=\"token operator\">|</span> Organisation<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">contact</span><span class=\"token operator\">:</span> Contact</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> contact<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드를 실행하게 될시 오류를 발생하게 된다. 괘냐하면 contact는 firstName을 가지고 있지 않은 Organisation을 담고 잇을 수도 있기 때문에 타입스크립트가 이를 차단한다. 바로 이런 상황에 상송의 여부를 확인하는 instanceof를 사용하면 될것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">contact</span><span class=\"token operator\">:</span> Contact</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contact <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> contact<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 작성하게 된다면 contact는 조건문에서 Person 클래스의 값을 받았을때에 한해서 if을 통과하고 문제없이 console.log()가 실행 될것이다.</p>\n<h3 id=\"in을-이용한-narrowing\" style=\"position:relative;\"><a href=\"#in%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-narrowing\" aria-label=\"in을 이용한 narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in을 이용한 Narrowing</h3>\n<p>객체를 좀 다루다 보면 in이라는 키워드를 접해본적이 있을텐데 in은 키워드의 의미와 부합하게 왼쪽의 값이 오른쪽의 객체에 존재하는지를 확인하는 키워드이다 이를 이용하여 타입의 범위를 좁힐 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n  <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\ntype Contact <span class=\"token operator\">=</span> Person <span class=\"token operator\">|</span> Organisation<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 코드가 있다고 할때 in을 이용하여 firstName을 찾아 Person클래스로 범위를 줄여보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">contact</span><span class=\"token operator\">:</span> Contact</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'firstName'</span> <span class=\"token keyword\">in</span> contact<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> contact<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 작성하면 다음과 같은 것이다 firstName이라는 key를 가진 타입은 Person이 유일함으로 자동으로 Person 타입으로 범위가 줄어든다.</p>\n<h3 id=\"type-predicate를-이용한-타입-narrowing\" style=\"position:relative;\"><a href=\"#type-predicate%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%83%80%EC%9E%85-narrowing\" aria-label=\"type predicate를 이용한 타입 narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>type predicate를 이용한 타입 Narrowing</h3>\n<p>이번에는 promise 객체를 반환하는 상황에서 타입의 범위를 줄이는 방법에 대해 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRating</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">productId</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\r\n<span class=\"token operator\">/</span>products<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>productId<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> rating <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">return</span> rating<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 fetch 코드가 있다고 하면 들어오는 타입이 확정적으로 하나 밖에 없을시에는 &#x3C;>를 이용하여 사용 할 수도 있겠지만 예상치 못한 값이 들어올 수도 있는 상황이라면 type predicate 방식의 사용을 고려해보는 것도 좋을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isValidRating</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token parameter\"><span class=\"token literal-property property\">rating</span><span class=\"token operator\">:</span> any</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> rating is Rating <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rating <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> rating <span class=\"token operator\">!==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">5</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>type predicate를 위한 isValidRating함수이다 해당 함수를 해석해보자면 isValidRating의 return 값이 true일시 rating변수를 해당 함수가 호출이 된 범위 내에서는 Rating 타입으로 취급해라 라는 의미이다. 중간에 if을 이용할 수 있어 예상치 못한 타입이 왔을시 예외처리가 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRating</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">productId</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>productId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> rating <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidRating</span><span class=\"token punctuation\">(</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> rating<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type of rating is `Rating`</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 함수를 적용한 모습이다 이 함수의 return 값은 type predicate에 의해 Rating으로 범위가 좁혀진 것을 실행하면 확인해볼 수 있다.</p>","frontmatter":{"date":"June 01, 2024","title":"TypeScript Narrowing과 Assertion","categories":"Typescript","author":"fefdfea","emoji":"🍇"},"fields":{"slug":"/typescript-nr-ar/"}},"site":{"siteMetadata":{"siteUrl":"https://fefdfea1.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/typescript-html/","nextSlug":"/typescript-class/","prevSlug":"/typescript-nr-ar/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}