{"componentChunkName":"component---src-templates-blog-template-js","path":"/typescript-Conditional Types/","result":{"data":{"cur":{"id":"1553938e-cadc-5dee-8aad-ece21ba5d552","html":"<h1 id=\"타입스크립트의-조건문을-이용한-타입생성\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%83%80%EC%9E%85%EC%83%9D%EC%84%B1\" aria-label=\"타입스크립트의 조건문을 이용한 타입생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 조건문을 이용한 타입생성</h1>\n<p>타입스크립트에는 조건문을 이용하여 타입을 생성하는 방법을 지원하는데 이를 조건부 타입(Conditional Types)이라 한다. 조건부 타입은 정확히 말해서 자신이 입력한 제네릭 타입에 따라 true일때 타입과 false 일때 타입을 정하여 사용하는 방법이다.</p>\n<h2 id=\"-조건부-타입\" style=\"position:relative;\"><a href=\"#-%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85\" aria-label=\" 조건부 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔥 조건부 타입</h2>\n<p>조건부 타입은 자바스크립트에서 삼항연산자를 사용해본 사람들이라면 많이 익숙할 것이다. 아래의 예제를 한번 보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Conditional<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">?</span> string <span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// string</span>\r\ntype a <span class=\"token operator\">=</span> Conditional<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예제는 Conditional 타입에 string을 넘겨주면 true 일때 string을 넘겨주고 string이 아니라면 any 타입을 넘겨주는 조건문이다. 실행 흐름은 아래와 같다.</p>\n<ol>\n<li>conditional 제네릭으로 string 타입전달</li>\n<li>전달받은 제네틱을 T로 전달하여 string 타입과 유효한지 확인</li>\n<li>true라면 string을 반환</li>\n<li>false라면 any를 반환</li>\n</ol>\n<h2 id=\"-분산-조건부-타입\" style=\"position:relative;\"><a href=\"#-%EB%B6%84%EC%82%B0-%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85\" aria-label=\" 분산 조건부 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💧 분산 조건부 타입</h2>\n<p>그럼 만약 위의 조건문에 유니언타입을 넣으면 어떤 결과가 발생할까? 조건문에서 any 부분을 number로 수정하고 유니언 타입을 넘겨보도록 하겠다.( 이유는 좀더 뒤에서 설명)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Conditional<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">?</span> string <span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// a = string | number</span>\r\ntype a <span class=\"token operator\">=</span> Conditional<span class=\"token operator\">&lt;</span>string <span class=\"token operator\">|</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>결과 값을 보면 유니언 타입을 넣을시 유니언 타입을 반환하는 것을 알 수 있다. 얼핏 보면 어려울 수 있지만 그냥 유니언 타입을 넣고 true와 false 값에 any , never 형식이 안 들어가 있다면 유니언 타입을 반환한다.\r\n이와 같은 현상을 <strong>분산 조건부 타입(distributive conditional types)</strong>이라고 한다.</p>\n<p>이러한 일이 발생하는 이유는 유니언 타입에 작성된 타입 하나하나를 조건부 타입 검사를 실시하여서 그렇다.</p>\n<p>결론 : any나 never가 true나 false 값으로 설정만 안 되어 있다면 유니언 타입을 넘겼을때 유니언 타입으로 값이 나온다.</p>\n<h2 id=\"-분산-조건부-타입이-불가능할때\" style=\"position:relative;\"><a href=\"#-%EB%B6%84%EC%82%B0-%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85%EC%9D%B4-%EB%B6%88%EA%B0%80%EB%8A%A5%ED%95%A0%EB%95%8C\" aria-label=\" 분산 조건부 타입이 불가능할때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌊 분산 조건부 타입이 불가능할때</h2>\n<p>위 처럼 가능한 경우도 있지만 불가능한 경우 또한 존재하는데</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//no</span>\r\ntype <span class=\"token constant\">T3</span> <span class=\"token operator\">=</span> string <span class=\"token operator\">|</span> number <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">?</span> <span class=\"token string\">'yes'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'no'</span><span class=\"token punctuation\">;</span>\r\n\r\ntype <span class=\"token constant\">T4</span> <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>string <span class=\"token operator\">|</span> number<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이와 같이 제네릭(type parameter)을 사용하지 않고 직접 비교하는 타입을 입력하게 된다면 타입 분산이 이루어 지지 않아 유니언 타입으로 반환하지 않는다. 이 것이 앞서 위의 예제에서 return 타입을 변경시킨 이유에 해당한다.</p>\n<h2 id=\"️-분산조건부-타입에서의-never\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%B6%84%EC%82%B0%EC%A1%B0%EA%B1%B4%EB%B6%80-%ED%83%80%EC%9E%85%EC%97%90%EC%84%9C%EC%9D%98-never\" aria-label=\"️ 분산조건부 타입에서의 never permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☄️ 분산조건부 타입에서의 never</h2>\n<p>분산조건부 타입을 하면 Never 타입을 무시하고 return을 시켜주는 특징이 있는데 예제를 보면서 설명 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Never<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">number</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> never<span class=\"token punctuation\">;</span>\r\n\r\ntype Types <span class=\"token operator\">=</span> number <span class=\"token operator\">|</span> string<span class=\"token punctuation\">;</span>\r\ntype Never반환안함 <span class=\"token operator\">=</span> Never<span class=\"token operator\">&lt;</span>Types<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 예제에서 Never반환안함 타입이 가지는 타입은 number이다. 분명 유니언 타입으로 작성하여 never 타입을 반환 받아지만 never타입은 생략 되어 number만 받은거이다.</p>\n<p>최대한 간단하게 쓴다고 하였지만 생각보다 길이가 길어져 남은 infer. 키워드에 대해서는 다음 포스팅에 다루도록 하겠다.</p>","excerpt":"타입스크립트의 조건문을 이용한 타입생성 타입스크립트에는 조건문을 이용하여 타입을 생성하는 방법을 지원하는데 이를 조건부 타입(Conditional Types)이라 한다. 조건부 타입은 정확히 말해서 자신이 입력한 제네릭 타입에 따라 true일때 타입과 false 일때 타입을 정하여 사용하는 방법이다. 🔥 조건부 타입 조건부 타입은 자바스크립트에서 삼항연산자를 사용해본 사람들이라면 많이 익숙할 것이다. 아래의 예제를 한번 보도록 하자 이 예제는 Conditional 타입에 string을 넘겨주면 true 일때 string을 넘겨주고 string이 아니라면 any 타입을 넘겨주는 조건문이다. 실행 흐름은 아래와 같다. conditional 제네릭으로 string 타입전달 전달받은 제네틱을 T로 전달하여 string 타입과 유효한지 확인 true라면 string을 반환 false라면 any를 반환 💧 분산 조건부 타입 그럼 만약 위의 조건문에 유니언타입을 넣으면 어떤 결과가 발생할까? …","frontmatter":{"date":"June 01, 2024","title":"타입스크립트 조건문을 이용한 타입생성","categories":"Typescript","author":"fefdfea","emoji":"👻"},"fields":{"slug":"/typescript-Conditional Types/"}},"next":{"id":"4294e98b-1c29-5ccd-8c63-2e25b0799005","html":"<h1 id=\"타입스크립트의-타입-확정\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%ED%83%80%EC%9E%85-%ED%99%95%EC%A0%95\" aria-label=\"타입스크립트의 타입 확정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 타입 확정</h1>\n<p>타입스크립트에서는 타입을 확정하기 위한 방법이 존재한다. 이러한 방법 2가지를 Narrowing과 Assertion으로 부르는데 이번에는 이 2가지에 대해 알아보도록 하자</p>\n<h2 id=\"타입을-설정한-대로-인식하게-하는-assertion\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C-%EB%8C%80%EB%A1%9C-%EC%9D%B8%EC%8B%9D%ED%95%98%EA%B2%8C-%ED%95%98%EB%8A%94-assertion\" aria-label=\"타입을 설정한 대로 인식하게 하는 assertion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입을 설정한 대로 인식하게 하는 Assertion</h2>\n<p>Assertion은 타입을 다른 타입으로 변경하는 것이 아닌 이 타입으로 생각해라~ 라는 의미이다. 즉 string 타입을 number로 Assertion한다고 number로 바뀌는 것은 아니라는 의미이다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\r\n    <span class=\"token literal-property property\">bas</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Foo<span class=\"token punctuation\">;</span>\r\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\r\nfoo<span class=\"token punctuation\">.</span>bas <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음 코드를 보면 as를 통해 foo의 타입을 Foo로 타입 표명하여 foo.bar, foo.bas로 접근하여 값을 수정할 수 있게 되었다 원래는 해당 방법 없이 foo에 접근하려 하면 bar와 bas가 없다는 오류를 발생시킨다.</p>\n<p>이처럼 as는 타입을 사용하여 일시적으로 해당 타입으로 인식시키는 것이 가능하지만 이를 너무 악용할시 타입스크립트를 사용하는 의미가 없어질 수도 있으니 주의해서 사용해야한다!</p>\n<h2 id=\"타입의-범위를-줄이는-narrowing\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%9D%98-%EB%B2%94%EC%9C%84%EB%A5%BC-%EC%A4%84%EC%9D%B4%EB%8A%94-narrowing\" aria-label=\"타입의 범위를 줄이는 narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입의 범위를 줄이는 Narrowing</h2>\n<p>Narrowing은 타입을 확정하기도 하지만 더 정확히는 타입의 범위를 줄인다고 표현하는게 맞는 표현이며 Narrowing으로 범위를 줄이는방법은 많은데 이번 포스팅에서 5가지 정도의 방법을 알아보겠다.</p>\n<h3 id=\"조건문을-이용한-방법\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"조건문을 이용한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문을 이용한 방법</h3>\n<p>조건문을 이용한 방법은 if 문을 이용하여 타입의 벙위를 좁히는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">legs</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 타입이 있다고 가정하였을때 legs라는 값에 + 1을 하면 undefined 타입이 존재하여 +연산을 할 수 없다. 그래서 이를 해결하기 위해 if문으로 legs가 undefined가 아닐때 +연산을 진행하도록 할 수 있는데 이것이 조건문을 이용한 Narrowing이다 해당 방법을 통하여 undefined말고 null 또한 해결이 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addLeg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">animal</span><span class=\"token operator\">:</span> Animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">.</span>legs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    animal<span class=\"token punctuation\">.</span>legs <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">.</span>legs <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"typeof를-이용하여-타입을-체크하는-방법\" style=\"position:relative;\"><a href=\"#typeof%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%ED%83%80%EC%9E%85%EC%9D%84-%EC%B2%B4%ED%81%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"typeof를 이용하여 타입을 체크하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof를 이용하여 타입을 체크하는 방법</h3>\n<p>typeof는 왼쪽의 갑을 오른쪽의 타입과 비교해주는 키워드이다 바로 코드를 보면서 이해해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// item이 string 타입</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> item <span class=\"token operator\">+</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// item이 number 타입</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 item은 string과 number 둘다 허용하고 있지만 typeof로 string 타입과 같을때만 true를 반환하고 if문을 통과할 수 있어 타입의 범위를 줄일 수 있다.</p>\n<h3 id=\"instanceof를-이용한-방법\" style=\"position:relative;\"><a href=\"#instanceof%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"instanceof를 이용한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>instanceof를 이용한 방법</h3>\n<p>instanceof는 객체가 Class에 속하거나 class의 인스턴스인지를 확인하는 방법으로 만약 한 타입에 2가지의 클래스를 가질 수 있는 타입이라고 하면 instanceof를 사용 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\r\n        <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> string</span>\r\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Organisation</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\ntype Contact <span class=\"token operator\">=</span> Person <span class=\"token operator\">|</span> Organisation<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">contact</span><span class=\"token operator\">:</span> Contact</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> contact<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드를 실행하게 될시 오류를 발생하게 된다. 괘냐하면 contact는 firstName을 가지고 있지 않은 Organisation을 담고 잇을 수도 있기 때문에 타입스크립트가 이를 차단한다. 바로 이런 상황에 상송의 여부를 확인하는 instanceof를 사용하면 될것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">contact</span><span class=\"token operator\">:</span> Contact</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contact <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> contact<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 작성하게 된다면 contact는 조건문에서 Person 클래스의 값을 받았을때에 한해서 if을 통과하고 문제없이 console.log()가 실행 될것이다.</p>\n<h3 id=\"in을-이용한-narrowing\" style=\"position:relative;\"><a href=\"#in%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-narrowing\" aria-label=\"in을 이용한 narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in을 이용한 Narrowing</h3>\n<p>객체를 좀 다루다 보면 in이라는 키워드를 접해본적이 있을텐데 in은 키워드의 의미와 부합하게 왼쪽의 값이 오른쪽의 객체에 존재하는지를 확인하는 키워드이다 이를 이용하여 타입의 범위를 좁힐 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n  <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Organization</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\ntype Contact <span class=\"token operator\">=</span> Person <span class=\"token operator\">|</span> Organisation<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 코드가 있다고 할때 in을 이용하여 firstName을 찾아 Person클래스로 범위를 줄여보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">contact</span><span class=\"token operator\">:</span> Contact</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'firstName'</span> <span class=\"token keyword\">in</span> contact<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span> <span class=\"token operator\">+</span> contact<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 작성하면 다음과 같은 것이다 firstName이라는 key를 가진 타입은 Person이 유일함으로 자동으로 Person 타입으로 범위가 줄어든다.</p>\n<h3 id=\"type-predicate를-이용한-타입-narrowing\" style=\"position:relative;\"><a href=\"#type-predicate%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%83%80%EC%9E%85-narrowing\" aria-label=\"type predicate를 이용한 타입 narrowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>type predicate를 이용한 타입 Narrowing</h3>\n<p>이번에는 promise 객체를 반환하는 상황에서 타입의 범위를 줄이는 방법에 대해 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRating</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">productId</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\r\n<span class=\"token operator\">/</span>products<span class=\"token operator\">/</span>$<span class=\"token punctuation\">{</span>productId<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> rating <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">return</span> rating<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 fetch 코드가 있다고 하면 들어오는 타입이 확정적으로 하나 밖에 없을시에는 &#x3C;>를 이용하여 사용 할 수도 있겠지만 예상치 못한 값이 들어올 수도 있는 상황이라면 type predicate 방식의 사용을 고려해보는 것도 좋을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isValidRating</span><span class=\"token punctuation\">(</span>\r\n  <span class=\"token parameter\"><span class=\"token literal-property property\">rating</span><span class=\"token operator\">:</span> any</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> rating is Rating <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rating <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> rating <span class=\"token operator\">!==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span>\r\n    rating <span class=\"token operator\">===</span> <span class=\"token number\">5</span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>type predicate를 위한 isValidRating함수이다 해당 함수를 해석해보자면 isValidRating의 return 값이 true일시 rating변수를 해당 함수가 호출이 된 범위 내에서는 Rating 타입으로 취급해라 라는 의미이다. 중간에 if을 이용할 수 있어 예상치 못한 타입이 왔을시 예외처리가 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRating</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">productId</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/products/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>productId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">const</span> rating <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidRating</span><span class=\"token punctuation\">(</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> rating<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type of rating is `Rating`</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 함수를 적용한 모습이다 이 함수의 return 값은 type predicate에 의해 Rating으로 범위가 좁혀진 것을 실행하면 확인해볼 수 있다.</p>","frontmatter":{"date":"June 01, 2024","title":"TypeScript Narrowing과 Assertion","categories":"Typescript","author":"fefdfea","emoji":"🍇"},"fields":{"slug":"/typescript-nr-ar/"}},"prev":{"id":"fd2c3141-1c2a-5cbc-a1b1-2e3df012a980","html":"<h1 id=\"-타입스크립트로-html-조작\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-html-%EC%A1%B0%EC%9E%91\" aria-label=\" 타입스크립트로 html 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎲 타입스크립트로 HTML 조작</h1>\n<p>이번 포스팅은 타입스크립트로 HTML을 조작하는 방법에 대해 포스팅을 진행하겠다. 타입스크립트에서 HTML을 조작하려고하면 어떤 HTML의 종류인지를 알릴 필요가 있다. 알리는 방법은 크게 2가지가 있다.</p>\n<ul>\n<li>Assertion을 이용한 방법 ( as )</li>\n<li>instanceof를 이용한 방법</li>\n</ul>\n<h2 id=\"️-assertion을-이욯한-방법\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-assertion%EC%9D%84-%EC%9D%B4%EC%9A%AF%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"️ assertion을 이욯한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>♟️ Assertion을 이욯한 방법</h2>\n<p>Assertion을 이용한 방법은 특정 dom을 찾았을때 해당 명령어의 가장 오른쪽에 as 를 붙이고 자신이 원하는 태그를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".div\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLDivElement</code></pre></div>\n<p>위의 코드와 같이 어떤 HTML인지 as를 통해 지정하면 된다. 만약 어떤 HTML의 타입이 있는지 모른다면 일단 HTML을 붙이고 자신이 사용하는 태그를 함께 붙여보자 거의 다 그렇게 나온다.</p>\n<p>ex : a태그 = HTML + a = HTMLAnchorElement\r\nex2: span태그 = HTML + span = HTMLSpanElement</p>\n<h2 id=\"-instanceof를-이용한-방법\" style=\"position:relative;\"><a href=\"#-instanceof%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\" instanceof를 이용한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪅 instanceof를 이용한 방법</h2>\n<p>instanceof는 이전 포스팅에서 특정 생성자의 속한 객체인지 혹은 생성자를 통해 만들어진 인스턴스인지를 판단하는 키워드라고 하였다.\r\n이를 이용하여 사용하는 HTML 태그가 어떤 객체에서 상속받아 만들어졌는지를 이용하여 Narrowing이 가능하다. 예시를 보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".div\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> div <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLDivElement</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  코드 <span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드에서는 div가 HTMLDivElement의 객체를 상속받은 태그인지를 확인하여 Boolean값으로 반환하는 코드를 if문의 조건문으로 작성하였다. 이러한 방식을 통해 div의 조건문이 true가 반환이 된다면 이는 div태그가 맞다는 것을 나타낸다.</p>","frontmatter":{"date":"June 02, 2024","title":"TypeScript HTML조작법","categories":"Typescript","author":"fefdfea","emoji":"🤔"},"fields":{"slug":"/typescript-html/"}},"site":{"siteMetadata":{"siteUrl":"https://fefdfea1.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/typescript-Conditional Types/","nextSlug":"/typescript-nr-ar/","prevSlug":"/typescript-html/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}