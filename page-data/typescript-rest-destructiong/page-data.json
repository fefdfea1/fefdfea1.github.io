{"componentChunkName":"component---src-templates-blog-template-js","path":"/typescript-rest-destructiong/","result":{"data":{"cur":{"id":"201bd9e7-1530-55ba-a8d7-ec1f2ef5ef8e","html":"<h1 id=\"rest-파라미터와-destructuring-타입지정\" style=\"position:relative;\"><a href=\"#rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%99%80-destructuring-%ED%83%80%EC%9E%85%EC%A7%80%EC%A0%95\" aria-label=\"rest 파라미터와 destructuring 타입지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rest 파라미터와 destructuring 타입지정</h1>\n<p>이번 시간에는 rest 파라미터와 destructuring 문법에서 타입을 지정하는 방법에 대해 알아보겠다. 하지만 진행하기전 이 문법들이 어떤 문법인지 간략하게 알면 더 도움이 될 것 같으니 간략하게 짚고 넘어가보자</p>\n<h2 id=\"rest-파라미터\" style=\"position:relative;\"><a href=\"#rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"rest 파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rest 파라미터</h2>\n<p>rest 파라미터는 함수의 매개변수에 사용 할 수 있는 문법으로 보통 함수에 변수 하나를 생성하면 인자 값으로는 하나의 값만을 넘긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">function</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">매개변수<span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>매개변수<span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"인자값1\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이러한 코드에서 rest 파라미터는 받는 인자값을 모두 배열의 원소로 저장하여 보관하는 문법이다. 사용방법은 어렵지 않고 …만 붙여주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">function</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>결과 : [ 1,2,3,4,5,6,7 ]</p>\n</blockquote>\n<p>여기서 주의해야할 점은 rest 문법 이후에 오는 모든 인자값을 배열의 원소로 저장하기 때문에 rest 파라미터 하나만 쓸 것이 아니라면 항상 가장 뒤에 사용하여야 한다.</p>\n<h2 id=\"destructuring-구조-분해-할당-\" style=\"position:relative;\"><a href=\"#destructuring-%EA%B5%AC%EC%A1%B0-%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9-\" aria-label=\"destructuring 구조 분해 할당  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>destructuring( 구조 분해 할당 )</h2>\n<p>destructuring은 배열이나 객체의 값을 다른 변수로 따로 분리하는 문법이라고 생각하면 쉬울 것이다. 이 부분은 바로 코드를 보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> one <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> two <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> three <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리는 arr의 값을 가져오기 위해 다음과 같이 배열의 index로 접근하여 특정 값을 가져올 수 있다. 하지만 destructuring문법을 이용한다면 이러한 부분을 좀더 간편하게 개선할 수 있게된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>출력 결과: 1 2 3</p>\n</blockquote>\n<p>변수를 []로 감싸고 대입의 값으로써 배열으 넘기게 된다면 arr의 배열안에 원소가 순차적으로 변수에 들어가게 되고 one two three에는 각각 1,2,3이 들어가게 된다.</p>\n<h2 id=\"rest-파라미터에-타입을-지정하는-방법\" style=\"position:relative;\"><a href=\"#rest-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"rest 파라미터에 타입을 지정하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rest 파라미터에 타입을 지정하는 방법</h2>\n<p>위에서 언급했듯 rest 파라미터는 모든 인자값을 가져오기 때문에 그대로 사용한다면 타입스크립트의 장점을 살리기 힘들다. 그래서 rest 파라미터 또한 타입을 제한할 수 있는데 일반적으로 함수에서 타입을 제한하던 방법과 동일하다</p>\n<h3 id=\"함수-선언문\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8\" aria-label=\"함수 선언문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 선언문</h3>\n<p>함수 선언문에서 타입 지정은 ()안의 매개변수 자리에 밖에 지정이 불가능하기 때문에 아래의 코드처럼 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type 타입 <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest<span class=\"token operator\">:</span>타입<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  코드<span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"함수-표현식\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"함수 표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 표현식</h3>\n<p>함수 표현식에서는 위의 방식을 사용하여도 가능하고 아래와 같이 모든 매개변수를 한번에 지정하는 방법 또한 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type 타입 <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">함수</span><span class=\"token operator\">:</span>타입<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function-variable function\">function</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  코드<span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"destructuring의-타입을-지정하는-방법\" style=\"position:relative;\"><a href=\"#destructuring%EC%9D%98-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"destructuring의 타입을 지정하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>destructuring의 타입을 지정하는 방법</h2>\n<p>destructuring 또한 rest와 마찬가지로 배열의 아무 값이나 변수로 저장하게 된다면 우리가 원하는 값이 아닐 수도 있으므로 타입을 지정하는 방법이 존재한다.</p>\n<h3 id=\"기존-destructuring-방법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-destructuring-%EB%B0%A9%EB%B2%95\" aria-label=\"기존 destructuring 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 destructuring 방법</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"타입스크립트-destructuring-방법\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-destructuring-%EB%B0%A9%EB%B2%95\" aria-label=\"타입스크립트 destructuring 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 destructuring 방법</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">각 원소별로 하나하나 정하는 방법\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span>\r\n\r\n타입 alias를 이용한 방법\r\n\r\ntype 원소타입 <span class=\"token operator\">=</span> number\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>원소타입<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>이번에는 객체를 destructuring하는 방법에 대해 알아보자 객체 또한 배열과 다른점은 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">각 프로퍼티별로 하나하나 정하는 방법\r\n\r\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span>number <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> object</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">타입 alias를 이용한 방법\r\n\r\ntype 원소타입 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">,</span>\r\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span>number\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span>원소타입 <span class=\"token operator\">=</span> object</code></pre></div>","excerpt":"rest 파라미터와 destructuring 타입지정 이번 시간에는 rest 파라미터와 destructuring 문법에서 타입을 지정하는 방법에 대해 알아보겠다. 하지만 진행하기전 이 문법들이 어떤 문법인지 간략하게 알면 더 도움이 될 것 같으니 간략하게 짚고 넘어가보자 rest 파라미터 rest 파라미터는 함수의 매개변수에 사용 할 수 있는 문법으로 보통 함수에 변수 하나를 생성하면 인자 값으로는 하나의 값만을 넘긴다. 이러한 코드에서 rest 파라미터는 받는 인자값을 모두 배열의 원소로 저장하여 보관하는 문법이다. 사용방법은 어렵지 않고 …만 붙여주면 된다. 결과 : [ 1,2,3,4,5,6,7 ] 여기서 주의해야할 점은 rest 문법 이후에 오는 모든 인자값을 배열의 원소로 저장하기 때문에 rest 파라미터 하나만 쓸 것이 아니라면 항상 가장 뒤에 사용하여야 한다. destructuring( 구조 분해 할당 ) destructuring은 배열이나 객체의 값을 다른 변수로 따로…","frontmatter":{"date":"June 03, 2024","title":"TypeScript rest 파라미터와 destructuring 타입지정","categories":"Typescript","author":"fefdfea","emoji":"😲"},"fields":{"slug":"/typescript-rest-destructiong/"}},"next":{"id":"fd2c3141-1c2a-5cbc-a1b1-2e3df012a980","html":"<h1 id=\"-타입스크립트로-html-조작\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A1%9C-html-%EC%A1%B0%EC%9E%91\" aria-label=\" 타입스크립트로 html 조작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎲 타입스크립트로 HTML 조작</h1>\n<p>이번 포스팅은 타입스크립트로 HTML을 조작하는 방법에 대해 포스팅을 진행하겠다. 타입스크립트에서 HTML을 조작하려고하면 어떤 HTML의 종류인지를 알릴 필요가 있다. 알리는 방법은 크게 2가지가 있다.</p>\n<ul>\n<li>Assertion을 이용한 방법 ( as )</li>\n<li>instanceof를 이용한 방법</li>\n</ul>\n<h2 id=\"️-assertion을-이욯한-방법\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-assertion%EC%9D%84-%EC%9D%B4%EC%9A%AF%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"️ assertion을 이욯한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>♟️ Assertion을 이욯한 방법</h2>\n<p>Assertion을 이용한 방법은 특정 dom을 찾았을때 해당 명령어의 가장 오른쪽에 as 를 붙이고 자신이 원하는 태그를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".div\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLDivElement</code></pre></div>\n<p>위의 코드와 같이 어떤 HTML인지 as를 통해 지정하면 된다. 만약 어떤 HTML의 타입이 있는지 모른다면 일단 HTML을 붙이고 자신이 사용하는 태그를 함께 붙여보자 거의 다 그렇게 나온다.</p>\n<p>ex : a태그 = HTML + a = HTMLAnchorElement\r\nex2: span태그 = HTML + span = HTMLSpanElement</p>\n<h2 id=\"-instanceof를-이용한-방법\" style=\"position:relative;\"><a href=\"#-instanceof%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\" instanceof를 이용한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🪅 instanceof를 이용한 방법</h2>\n<p>instanceof는 이전 포스팅에서 특정 생성자의 속한 객체인지 혹은 생성자를 통해 만들어진 인스턴스인지를 판단하는 키워드라고 하였다.\r\n이를 이용하여 사용하는 HTML 태그가 어떤 객체에서 상속받아 만들어졌는지를 이용하여 Narrowing이 가능하다. 예시를 보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".div\"</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> div <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLDivElement</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  코드 <span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드에서는 div가 HTMLDivElement의 객체를 상속받은 태그인지를 확인하여 Boolean값으로 반환하는 코드를 if문의 조건문으로 작성하였다. 이러한 방식을 통해 div의 조건문이 true가 반환이 된다면 이는 div태그가 맞다는 것을 나타낸다.</p>","frontmatter":{"date":"June 02, 2024","title":"TypeScript HTML조작법","categories":"Typescript","author":"fefdfea","emoji":"🤔"},"fields":{"slug":"/typescript-html/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://fefdfea1.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/typescript-rest-destructiong/","nextSlug":"/typescript-html/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}