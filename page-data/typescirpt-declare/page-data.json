{"componentChunkName":"component---src-templates-blog-template-js","path":"/typescirpt-declare/","result":{"data":{"cur":{"id":"3c2a3f94-4690-5311-b084-00e88d520329","html":"<h1 id=\"타입스크립트의-declare\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-declare\" aria-label=\"타입스크립트의 declare permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 declare</h1>\n<h2 id=\"declare-간단-요약\" style=\"position:relative;\"><a href=\"#declare-%EA%B0%84%EB%8B%A8-%EC%9A%94%EC%95%BD\" aria-label=\"declare 간단 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>declare 간단 요약</h2>\n<p>이번 포스팅은 타입스크립트에 존재하는 키워드중 하나인 declare에 대해 알아보도록 하겠다.</p>\n<p>declare는 어려울거 없이 그저 타입을 재정의 하는 기능이다. 바로 아래의 코드 예제르 보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// data.js</span>\r\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// index.ts</span>\r\ndeclare <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">a</span> <span class=\"token operator\">:</span>number<span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 data.js 파일에 a라는 아무런 타입이 정의되어 있지 않은 변수가 있다고 가정하자</p>\n<p>우리는 이 변수를 index.ts 파일에서 사용하기 위해서는 타입이 필요한데 js파일에서 만들어진 변수이기 때문에 타입이 존재하지 않는다. 이때 사용 할 수 있는 키워드가 declare로 a 변수의 타입을 재정의해 타입을 지정해줄 수 있다.</p>\n<blockquote>\n<p>요약: 타입이 안정해진 변수 같은거 타입 지정해줌</p>\n</blockquote>\n<h2 id=\"그럼-언제-사용해야-할까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%BC-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"그럼 언제 사용해야 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그럼 언제 사용해야 할까?</h2>\n<p>주로 외부 라이브러리를 사용할때 사용할 수 있지만 외부 라이브러리의 값이 타입스크립트의 타입추론으로 자동으로 타입이 생성 가능하다면 tsconfig.json 파일에서 allowJs옵션을 true로 설정하여 자바스크립트 파일도 타입 지정이 될 수 있도록 하면 알아서 타입추론을 해준다</p>","excerpt":"타입스크립트의 declare declare 간단 요약 이번 포스팅은 타입스크립트에 존재하는 키워드중 하나인 declare에 대해 알아보도록 하겠다. declare는 어려울거 없이 그저 타입을 재정의 하는 기능이다. 바로 아래의 코드 예제르 보도록 하자 위와 같이 data.js 파일에 a라는 아무런 타입이 정의되어 있지 않은 변수가 있다고 가정하자 우리는 이 변수를 index.ts 파일에서 사용하기 위해서는 타입이 필요한데 js파일에서 만들어진 변수이기 때문에 타입이 존재하지 않는다. 이때 사용 할 수 있는 키워드가 declare로 a 변수의 타입을 재정의해 타입을 지정해줄 수 있다. 요약: 타입이 안정해진 변수 같은거 타입 지정해줌 그럼 언제 사용해야 할까? 주로 외부 라이브러리를 사용할때 사용할 수 있지만 외부 라이브러리의 값이 타입스크립트의 타입추론으로 자동으로 타입이 생성 가능하다면 tsconfig.json 파일에서 allowJs옵션을 true로 설정하여 자바스크립트 파일도 …","frontmatter":{"date":"June 07, 2024","title":"타입스크립트 declare","categories":"Typescript","author":"fefdfea","emoji":"🤔"},"fields":{"slug":"/typescirpt-declare/"}},"next":{"id":"1a258859-5be1-5c1f-93e1-89133ffb34bc","html":"<h1 id=\"타입스크립트의-generic에-대하여\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-generic%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\" aria-label=\"타입스크립트의 generic에 대하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 Generic에 대하여</h1>\n<p>타입스크립트에는 타입을 고정적으로 지정하는 것 외에도 동적으로도 지정하는 방법이 존재한다. 사용방법은 어렵지 않으니 바로 코드를 보도록 하자</p>\n<h2 id=\"generic-기본-사용법\" style=\"position:relative;\"><a href=\"#generic-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"generic 기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 기본 사용법</h2>\n<p>타입스크립트 Generic의 기본 사용법은 사입을 만들때 &#x3C;>를 이용하여 변수의 이름을 작명하고 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type 제네릭타입<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> 제네릭타입<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 &#x3C;>를 이용하여 변수명을 작성하고 &#x3C;>를 제거하여 사용함으로서 변수를 사용한다고 생각하면 된다. 즉 위의 코드는 제네릭타입1이라는 타입에 T라는 변수를 받을 수 있도록 하고 number라는 값을 넘겨 사용하는 간단한 코드이다.</p>\n<blockquote>\n<p>타입에 값 넘기는법은 타입&#x3C;넘길 타입>의 형태로 값을 주면 된다.</p>\n</blockquote>\n<h2 id=\"함수에-적용\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\"함수에 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에 적용</h2>\n<p>이번에는 이를 함수에 적용해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> typeFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span> a<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  코드<span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntypeFn<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드처럼 기존의 타입에 적용하던 코드와 크게 차이는 없다. 함수의 이름 옆에 &#x3C;>를 이용하여 변수명을 작성하고 &#x3C;>를 제거한 이름만을 사용하여 해당 타입을의 값을 사용한다.</p>\n<h2 id=\"제네릭-2개-이상-사용\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-2%EA%B0%9C-%EC%9D%B4%EC%83%81-%EC%82%AC%EC%9A%A9\" aria-label=\"제네릭 2개 이상 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 2개 이상 사용</h2>\n<p>위의 코드들처럼 제네릭은 꼭 하나만 사용해야 하는 것은 아니라 마치 함수의 매개변수처럼 사용자가 원하는 만큼 늘릴 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> typeFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span><span class=\"token constant\">J</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token constant\">J</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  코드<span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntypeFn<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>방법은 기존에 만들었던 제네릭칸에 추가로 작성하기만 하면 되어 간단하다.</p>","frontmatter":{"date":"June 04, 2024","title":"TypeScript Generic","categories":"Typescript","author":"fefdfea","emoji":"🍀"},"fields":{"slug":"/typescript-generic/"}},"prev":{"id":"8afd2231-2ca1-55c0-ad97-fe8f444adc20","html":"<h1 id=\"-타입스크립트-infer-키워드\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-infer-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 타입스크립트 infer 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😏 타입스크립트 infer 키워드</h1>\n<p>이번 시간에는 이전 포스팅에서 말했던 infer 키워드에 대해 알아보도록 하겠다. infer 키워드는 조건이 true일Eo 제네릭의 타입을 추론하여 해당 타입을 변수에 넣어주는 역할을 수행한다. 그리고 무조건 extends 뒤에 사용 할 수 있다는 규칙이 있다.</p>\n<h2 id=\"-infer-간단-예제\" style=\"position:relative;\"><a href=\"#-infer-%EA%B0%84%EB%8B%A8-%EC%98%88%EC%A0%9C\" aria-label=\" infer 간단 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🫡 infer 간단 예제</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Foo<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> infer <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> infer <span class=\"token constant\">U</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> never<span class=\"token punctuation\">;</span>\r\ntype <span class=\"token constant\">T10</span> <span class=\"token operator\">=</span> Foo<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string</span>\r\n\r\n<span class=\"token literal-property property\">출처</span><span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>inpa<span class=\"token punctuation\">.</span>tistory<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>entry<span class=\"token operator\">/</span><span class=\"token constant\">TS</span><span class=\"token operator\">-</span>📘<span class=\"token operator\">-</span>타입스크립트<span class=\"token operator\">-</span>조건부<span class=\"token operator\">-</span>타입<span class=\"token operator\">-</span>완벽<span class=\"token operator\">-</span>이해하기 <span class=\"token punctuation\">[</span>Inpa Dev 👨‍💻<span class=\"token operator\">:</span>티스토리<span class=\"token punctuation\">]</span>type <span class=\"token constant\">T11</span> <span class=\"token operator\">=</span> Foo<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// string | number</span>\r\n</code></pre></div>\n<p>이 예제 코드를 보면 extends 뒤에 사용되며 T10 타입이 foo 타입을 호출하며 제네릭을 넘기고 있다. 해당 제네릭을 받은 foo는 T로 전달하며 오른쪽의 객체와 동일한 타입을 같는지 확인한다. 기르고 true 라면 infer 키워드들이 각각의 프로퍼티의 타입을 유추하여 U 변수에 저장하고 반환한다.</p>\n<ul>\n<li>Foo 타입을 호출</li>\n<li>Foo 타입에 제네릭을 넘기고 Foo에서 extends 오른쪽은 타입과 동일한 타입인지 검사</li>\n<li>동일하다면 infer 키워드가 각각의 프로퍼티의 타입을 검사</li>\n<li>타입을 return</li>\n</ul>\n<h2 id=\"-어디다-사용-할-수-있을까\" style=\"position:relative;\"><a href=\"#-%EC%96%B4%EB%94%94%EB%8B%A4-%EC%82%AC%EC%9A%A9-%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\" 어디다 사용 할 수 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤠 어디다 사용 할 수 있을까?</h2>\n<p>infer 키워드는 위에서 보았듯이 타입을 유추하는데 사용이 가능하다 예를 들어 특정 함수의 return 값의 타입 혹은 인자 값의 타입 같은 것도 유추 하는 방법으로도 사용이 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bool</span><span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\r\n   <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntype My_ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> infer <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\r\ntype My_Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> infer <span class=\"token constant\">R</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> never<span class=\"token punctuation\">;</span>\r\n\r\n\r\ntype Return_Type <span class=\"token operator\">=</span> My_ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> fn<span class=\"token operator\">></span> <span class=\"token comment\">// 함수의 리턴 타입을 반환</span>\r\n<span class=\"token comment\">// type Return_Type = string | voi</span>\r\n\r\ntype Parameters_Type <span class=\"token operator\">=</span> My_Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> fn<span class=\"token operator\">></span> <span class=\"token comment\">// 함수의 파라미터들의 타입을 반환</span>\r\n<span class=\"token comment\">// type Parameters_Type = [num: number, ste: string, bool: boolean]</span>\r\n\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> My_ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> fn<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> My_Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> fn<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token literal-property property\">출처</span><span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>inpa<span class=\"token punctuation\">.</span>tistory<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>entry<span class=\"token operator\">/</span><span class=\"token constant\">TS</span><span class=\"token operator\">-</span>📘<span class=\"token operator\">-</span>타입스크립트<span class=\"token operator\">-</span>조건부<span class=\"token operator\">-</span>타입<span class=\"token operator\">-</span>완벽<span class=\"token operator\">-</span>이해하기 <span class=\"token punctuation\">[</span>Inpa Dev 👨‍💻<span class=\"token operator\">:</span>티스토리<span class=\"token punctuation\">]</span></code></pre></div>\n<p>위의 예제에서는 infer 키워드를 이용하여 함수를 넘겨주고 해당 함수의 return 값 혹은 인자값의 타입을 유추하여 return 하는 에제를 보여주고 있다. 잘 모르겠다면 아직 타입스크립트에 익숙하지 않아면 어려울 수도 있을거라 생각하지만 순서대로 읽으면 어렵지 않으니 이전 포스팅의 extends 와 이번에 포스팅한 infer 키워드를 다시 한번 보고 천천히 읽는 것을 추천한다. 참고로 (…args: any) => any 부분은 함수를 의미하는 것이다.</p>","frontmatter":{"date":"June 08, 2024","title":"타입스크립트 infer 키워드","categories":"Typescript","author":"fefdfea","emoji":"🌤️"},"fields":{"slug":"/typescript-infer/"}},"site":{"siteMetadata":{"siteUrl":"https://fefdfea1.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/typescirpt-declare/","nextSlug":"/typescript-generic/","prevSlug":"/typescript-infer/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}