{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3e527649-c4d0-571a-8aa4-cf478c6c8ccb","excerpt":"쇼핑몰 프로젝트 mongodb를 이용한 서버 개발 이번 포스팅은 next js에서 mongodb를 이용한 서버개발과 데이터를 불러와 직접 SSG에서 ISR 형태로 만들어보자 mongoDB 세팅 처음으로 할일은 mongoDB를 세팅하는 일이다. mongodb는 처음에 cluster라는 것을 만들어야 하는데 한 계정한 하나의 무료로 사용가능한 cluster를 만들 수 있기 때문에 돈 걱정은 안해도 괜찮다. cluster 세팅 처음 회원가입을 하고 좌측 side menu에서 database를 클릭하면 다음과 같이 보일 것이다 여기서 필자는 이미 만들어둔 cluster가 있기에 이것을 사용할 것이지만 없는 사람은 오른쪽의 create를 눌러주자 create화면 접속하면 다음과 가은 화면이 보일텐데 아래의 순서를 따라 생성해보자 Shared 클릭 원하는 Provider 클릭 자신이 거주중인 국가 클릭 아래의 cluster tier에서 반드시 M0 Sandbox로 되어있는지 확인 create…","frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 서버개발","date":"July 01, 2024"},"fields":{"slug":"/next-shopProject6/"}}},{"node":{"id":"f5c6b066-da04-58e9-a0d4-7688893a46c3","excerpt":"Next Js api 라우터에서 서버 개발 쇼핑몰 레이아웃에 이어 서버 개발을 시작하기 이전에 Next js에서 서버 개발을 하는 방법에 대해 정말 정말 짧겠지만 알고가면 조금더 도움이 될 것 같아 작성하게 되었다. app 라우터 방식에서 서버개발 우선 기존 page 방식과 어떤 방법의 차이가 있는지 알아보도록 하자 해당 이미지를 보면 왼쪽이 현재의 app 라이팅 오른쪽이 page 라우팅 방식의 방법이다. 이처럼 app 라우팅은 api/폴더명/route.js or js 형태로 제작을 해야하며 page라우팅 방식은 그보다는 자유롭게 자인이 원하는 이름.js or ts를 사용하여 제작할 수 있는 차이가 있다. 라우팅 예제 폴더구조와 파일 이름만 잘 맞추면 자동으로 라우팅되면 위의 코드와 같이 작성하면 데이터를 가져올 수 있도록 설정이 가능하다 이렇게 설정을 마쳤다면 이제 데이터를 불러와보도록 하자 데이터 가져오기( fetch ) 데이터 가져오기는 APP 라우터 방식만을 다룰 예정이며 …","frontmatter":{"categories":"Next_JS","title":"Next Js app 라우터에서 서버 개발","date":"June 30, 2024"},"fields":{"slug":"/next-serverDevelop/"}}},{"node":{"id":"f4d823aa-35cc-50d2-9daf-b69ba7213710","excerpt":"레이아웃 슬라이더 구현 및 전체 레이아웃 완성 이번 포스팅에서는 전체적인 레이아웃을 지금까지 만큼 컴포넌트를 이용하여 제작하고 포스팅이 좀 길어지더라도 상단의 슬라이더 부분까지 제작해볼 예정이다 컴포넌트 조합 결과 원래는 하나하나 제작하며 변경된 사항에 대하여 설명하면서 하려 하였지만 너무 레이아웃에만 많은 시간을 들이기에는 이 주제가 서버 개발로 데이터를 불러오는 것 까지 해야해서 따로 설명을 하지는 않고 완성된 모습만 가지고 슬라이더를 제작하도록 하겠다. 슬라이더 제작 서비스 소개 위쪽에 본래 슬라이더가 존재하는데 이 부분을 구현해 보도록 하자 구현 방법은 React slick을 이용하여 구현해보겠다. 슬라이더 컴포넌트 제작 react-slick 라이브러리 적용을 위해 아래와 같은 패키지를 다운해준다. import Slider from “react-slick”; import “slick-carousel/slick/slick.css”; import “slick-carousel/s…","frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 최종","date":"June 25, 2024"},"fields":{"slug":"/next-shopProject5/"}}},{"node":{"id":"30fe37af-c2ba-5669-93fa-561cb942e6a1","excerpt":"레이아웃 구성 3 이번 포스팅에서는 저번에 만들던 컴포넌트를 이어서 모두 만들도록 하겠다. 저번에는 컴포넌트 2까지 만들었으니 3 부터 이어서 해보자 productCard 컴포넌트 제작 RecommendButton 컴포넌트 제작 rentalCard 컴포넌트 제작 컴포넌트 제작 끝 이것으로 컴포넌트 제작이 모두 끝났고 다음 포스팅 부터는 해당 컴포넌트를 이용하여 main 부분 레이아웃을 완성시키도록 하겠다.","frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 구성3","date":"June 24, 2024"},"fields":{"slug":"/next-shopProject4/"}}},{"node":{"id":"3b7c3d0e-87bc-5497-b507-120e0ad409e9","excerpt":"쇼핑몰 레이아웃 구성 2 저번 포스팅에 이어 이번에는 main부분을 클론코딩해볼 예정이다. main 부분도 Header와 동일하게 컴포넌트로 만들 부분들을 살펴보도록 하자 컴포넌트 나누기 필자는 컴포넌트를 최대한 재사용이 가능한 부분들을 최대한 컴포넌트로 제작할 예정이다. 아래의 디자인을 보면 같은 디자인이 계속 반복되는 것을 알 수 있다. html css등은 자세히 다루지 않을 예정이나 빠르게 구현하고 넘어가도록 하겠다. 필자는 컴포넌트를 위와 같이 나눌 예정이며 상단의 슬라이드는 라이브러리를 이용하여 추후 구현하도록 하겠다. 컴포넌트 제작 컴포넌트는 해당 이미지와 같이 제작 하였으며 아래의 컴포넌트들이 추가되었다. ProductCard.tsx ProductContainer.tsx RecommendButton.tsx RentalCard.tsx ServiceCard.tsx ServiceCard 제작 컴포넌트의 제작 순서는 위의 이미지에 보이는 1 ~ 5번 순서대로 제작을 하겠다. …","frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 구성2","date":"June 23, 2024"},"fields":{"slug":"/next-shopProject3/"}}},{"node":{"id":"c1cd7f05-6d7f-5061-8bd9-043d44108731","excerpt":"레이아웃 제작 CSS 사용중 문제 css를 사용하고 있던중 간과하고 있던 사실이 하나 있었는데 React가 아니라 Next js를 사용하고 있다는 사실을 잊어버리고 있었다. 현재 필자는 css-in-js 방식으로 css 스타일을 주려고 하였지만 emotion은 런타임 환경에서 동작하여 스타일을 주는 방식이기 때문에 서버사이드 방식을 채택하는 Next JS에서 사용에 한계가 있다. 사용이 불가능 한 것은 아니지만 쌩 HTML이 보이고 그다음 스타일이 동적으로 입혀지기 때문에 굉장히 이상하게 보인다. 이 문제에 대해서는 다음에 다루도록 하겠다. 우선 필자는 panda css를 사용하여 작업한다는 것을 알아두자 판다 css ai 사용을 안하는이유 이번 포스팅에는 본격적으로 레이아웃을 제작할 예정인데 원래 사용하려한 생성형 ai의 디자인을 사용하기가 어려울 것 같아 핀터레스트의 디자인 하나를 가져와 진행할 예정이다. 위의 이미지는 생성형 ai가준 디자인인데 ( 왼쪽은 uizard 오른쪽은…","frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 구성","date":"June 21, 2024"},"fields":{"slug":"/next-shopProject2/"}}},{"node":{"id":"cfd1e495-c100-5f09-ba6a-323c9f926b4f","excerpt":"Next JS 쇼핑몰 프로젝트 기본 셋업 이번 포스팅 부터는 Next JS와 요즘 뜨고있는 생성형 AI를 이용하여 쇼핑몰 프로젝트를 진행할 것이다. 이번 포스팅은 프로젝트를 위한 기본적인 셋업을 진행할 예정이다. Front Back Node js mongoDB 프로젝트 셋업 시작 우선 프로젝트 시작을 위해 새로운 폴더를 만들고 그곳에 Next Js 프로젝트를 하나 생성하겠다. 위의 이미지는 필자가 Next Js를 생성하면서 설정한 세팅이니 혹시참고하고 싶다면 참고하도록 하자 이렇게 세팅을 하면 아래의 이미지 처럼 폴더 구조가 나올텐데 이 상태에서 필요한 라이브러리들을 설치하도록 하고 사용하지 않는 파일들을 제거하겠다. 현재 사용하기로한 몇가지의 라이브러리를 설치한 package.json의 모습과 폴더구조이다 지금은 프로젝트를 진행하는 단계이니 이에 대해 따로 설명은 하지 않도록 하겠다. 이제 필요한 세팅이 끝났고 다음 포스팅 부터 생성형 ai를 이용하여 디자인을 받고 본격적으로 제…","frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 첫 번째","date":"June 19, 2024"},"fields":{"slug":"/next-shopProject1/"}}},{"node":{"id":"27456462-6428-5440-ae4a-d36a3d9080e6","excerpt":"SSG와 ISR SSG( Static Site Generation )에 대하여 SSG는 정적인 페이지를 보여줄때 사용하기 좋은 방법으로 동적인 움직임이 없고 변경 되어야하는 정보가 없다면 SSG 방식을 이용하여 사이트를 제작하는 것이 가장 좋은 선택일것이다. SSG SSR과는 랜더링이 되는 타이밍이 다른 것이 특징이다.  SSG 장점 빌드시 미리 랜더링을 하여 빠른 사용자 경험을 제공할 수 있다. SSG 단점 마찬가지로 빌드시 미리 페이지를 모두 랜더링 하기 때문에 데이터를 fetching 하여도 다시 빌드하는 것이 아니라면 반영이 되지 않는다 ISR ( Incremental Static Regeneration )에 대하여 ISR은 따로 분류가 되어 있지만 사실은 SSG에 포함되어 있는 형태이며 SSG에서 데이터를 fetching 할 수 있도록 개선된 형태이다 ISR은 SSG에서 데이터를 fetching 하면 일정시간 마다 전체 페이지가 아닌 해당 페이지만을 다시 빌드하여 데이터를…","frontmatter":{"categories":"Next_JS","title":"SSG와 ISR에 대하여","date":"June 16, 2024"},"fields":{"slug":"/next-SSG-ISG/"}}},{"node":{"id":"dc08f447-9e4d-5faa-92c4-ec179b9f4b8a","excerpt":"CSR SSR ISR SSG 이해하기 이번 포스팅은 그동안 타입 스크립트 부터 빠르게 포스팅 한다고 미뤄온 Next JS의 포스팅을 이어서 하겠다. CSR은 무엇인가 CSR( Client Side Rendering )은 리엑트나 vue를 다루어본 사람들이라면 누구나 한번씩은 들어 보았을 것이다. CSR 은 말 그대로 서버가 아닌 클라이언트( 사용자의 PC )에서 랜더링을 진행하는 것을 의미한다 전통적인 웹 브라우저의 동작 방식은 서버에서 랜더링을 진행하여 유저의 화면에 결과물과 js를 함께 보내주는 방식인데 CSR은 모든걸 유저에게 맡기는 것이다. 해당 이미지는 csr과 ssr의 차이를 나타낸 이미지이다 이미지에서 알 수 있듯 CSR은 HTML , CSS, JS를 모두 다운 받고 브라우저에서 랜더링을 진행한 후에 결과가 화면에 나타나는 것을 알 수 있다. 그럼 이런 방식에는 어떤 장점과 단점이 있을까? 장점 서버의 부하가 적어진다( 서버에서 랜더링을 하지 않음 ) 네이티브 앱과 같…","frontmatter":{"categories":"Next_JS","title":"Next JS의 SSR CSR 차이점","date":"June 14, 2024"},"fields":{"slug":"/next-clintAndServerComponent/"}}},{"node":{"id":"8afd2231-2ca1-55c0-ad97-fe8f444adc20","excerpt":"😏 타입스크립트 infer 키워드 이번 시간에는 이전 포스팅에서 말했던 infer 키워드에 대해 알아보도록 하겠다. infer 키워드는 조건이 true일Eo 제네릭의 타입을 추론하여 해당 타입을 변수에 넣어주는 역할을 수행한다. 그리고 무조건 extends 뒤에 사용 할 수 있다는 규칙이 있다. 🫡 infer 간단 예제 이 예제 코드를 보면 extends 뒤에 사용되며 T10 타입이 foo 타입을 호출하며 제네릭을 넘기고 있다. 해당 제네릭을 받은 foo는 T로 전달하며 오른쪽의 객체와 동일한 타입을 같는지 확인한다. 기르고 true 라면 infer 키워드들이 각각의 프로퍼티의 타입을 유추하여 U 변수에 저장하고 반환한다. Foo 타입을 호출 Foo 타입에 제네릭을 넘기고 Foo에서 extends 오른쪽은 타입과 동일한 타입인지 검사 동일하다면 infer 키워드가 각각의 프로퍼티의 타입을 검사 타입을 return 🤠 어디다 사용 할 수 있을까? infer 키워드는 위에서 보았듯이 …","frontmatter":{"categories":"Typescript","title":"타입스크립트 infer 키워드","date":"June 08, 2024"},"fields":{"slug":"/typescript-infer/"}}},{"node":{"id":"3c2a3f94-4690-5311-b084-00e88d520329","excerpt":"타입스크립트의 declare declare 간단 요약 이번 포스팅은 타입스크립트에 존재하는 키워드중 하나인 declare에 대해 알아보도록 하겠다. declare는 어려울거 없이 그저 타입을 재정의 하는 기능이다. 바로 아래의 코드 예제르 보도록 하자 위와 같이 data.js 파일에 a라는 아무런 타입이 정의되어 있지 않은 변수가 있다고 가정하자 우리는 이 변수를 index.ts 파일에서 사용하기 위해서는 타입이 필요한데 js파일에서 만들어진 변수이기 때문에 타입이 존재하지 않는다. 이때 사용 할 수 있는 키워드가 declare로 a 변수의 타입을 재정의해 타입을 지정해줄 수 있다. 요약: 타입이 안정해진 변수 같은거 타입 지정해줌 그럼 언제 사용해야 할까? 주로 외부 라이브러리를 사용할때 사용할 수 있지만 외부 라이브러리의 값이 타입스크립트의 타입추론으로 자동으로 타입이 생성 가능하다면 tsconfig.json 파일에서 allowJs옵션을 true로 설정하여 자바스크립트 파일도 …","frontmatter":{"categories":"Typescript","title":"타입스크립트 declare","date":"June 07, 2024"},"fields":{"slug":"/typescirpt-declare/"}}},{"node":{"id":"1a258859-5be1-5c1f-93e1-89133ffb34bc","excerpt":"타입스크립트의 Generic에 대하여 타입스크립트에는 타입을 고정적으로 지정하는 것 외에도 동적으로도 지정하는 방법이 존재한다. 사용방법은 어렵지 않으니 바로 코드를 보도록 하자 Generic 기본 사용법 타입스크립트 Generic의 기본 사용법은 사입을 만들때 <>를 이용하여 변수의 이름을 작명하고 사용하면 된다. 위와 같이 <>를 이용하여 변수명을 작성하고 <>를 제거하여 사용함으로서 변수를 사용한다고 생각하면 된다. 즉 위의 코드는 제네릭타입1이라는 타입에 T라는 변수를 받을 수 있도록 하고 number라는 값을 넘겨 사용하는 간단한 코드이다. 타입에 값 넘기는법은 타입<넘길 타입>의 형태로 값을 주면 된다. 함수에 적용 이번에는 이를 함수에 적용해보자 위의 코드처럼 기존의 타입에 적용하던 코드와 크게 차이는 없다. 함수의 이름 옆에 <>를 이용하여 변수명을 작성하고 <>를 제거한 이름만을 사용하여 해당 타입을의 값을 사용한다. 제네릭 2개 이상 사용 위의 코드들처럼 제네릭은…","frontmatter":{"categories":"Typescript","title":"TypeScript Generic","date":"June 04, 2024"},"fields":{"slug":"/typescript-generic/"}}},{"node":{"id":"e86cc8a4-5ed7-5b75-8858-4d4e3bc216b0","excerpt":"TypeScript Never타입 이번 포스팅은 Never 타입에 대해 알아보도록 하겠다. Never은 any나 unknown과는 다른 타입으로 그 어떤 값도 가질 수 없는 타입이다. 이렇게 아무것도 가질 수 없도록 하는 타입은 어떤 경우에 사용해야 할까? any도 예외없이 Never에 사용 불가능하다 함수의 매개변수로 사용 첫 번째로 함수의 매개변수의 타입을 never로 지정하여 값이 들어오는 경우를 방지 할 수 있다. 타이핑을 부분적으로 허용하지 않는다. 만약 2가지의 타입을 가질 수 있는 매개변수가 있다고 가정해보자 그렇게 된다면 다음 코드와 같이 본래 의도와는 다르게 두 가지 중 하나가 아닌 둘다를 사용하는 경우가 생길 수동 있다. 이를 막기위해 never를 사용하여 각각의 타입에 하나씩 객체를 추가하면 이런식으로 2가지 타입을 한번에 사용하는 것을 막을 수 있다. 유니언 타입에서 멤버 필터링 never 타입은 유니언 타입이에 사용할시 그대로 사라진다. 하지만 이러한 특성을…","frontmatter":{"categories":"Typescript","title":"TypeScript Never에 대해","date":"June 03, 2024"},"fields":{"slug":"/typescript-never/"}}},{"node":{"id":"201bd9e7-1530-55ba-a8d7-ec1f2ef5ef8e","excerpt":"rest 파라미터와 destructuring 타입지정 이번 시간에는 rest 파라미터와 destructuring 문법에서 타입을 지정하는 방법에 대해 알아보겠다. 하지만 진행하기전 이 문법들이 어떤 문법인지 간략하게 알면 더 도움이 될 것 같으니 간략하게 짚고 넘어가보자 rest 파라미터 rest 파라미터는 함수의 매개변수에 사용 할 수 있는 문법으로 보통 함수에 변수 하나를 생성하면 인자 값으로는 하나의 값만을 넘긴다. 이러한 코드에서 rest 파라미터는 받는 인자값을 모두 배열의 원소로 저장하여 보관하는 문법이다. 사용방법은 어렵지 않고 …만 붙여주면 된다. 결과 : [ 1,2,3,4,5,6,7 ] 여기서 주의해야할 점은 rest 문법 이후에 오는 모든 인자값을 배열의 원소로 저장하기 때문에 rest 파라미터 하나만 쓸 것이 아니라면 항상 가장 뒤에 사용하여야 한다. destructuring( 구조 분해 할당 ) destructuring은 배열이나 객체의 값을 다른 변수로 따로…","frontmatter":{"categories":"Typescript","title":"TypeScript rest 파라미터와 destructuring 타입지정","date":"June 03, 2024"},"fields":{"slug":"/typescript-rest-destructiong/"}}},{"node":{"id":"fd2c3141-1c2a-5cbc-a1b1-2e3df012a980","excerpt":"🎲 타입스크립트로 HTML 조작 이번 포스팅은 타입스크립트로 HTML을 조작하는 방법에 대해 포스팅을 진행하겠다. 타입스크립트에서 HTML을 조작하려고하면 어떤 HTML의 종류인지를 알릴 필요가 있다. 알리는 방법은 크게 2가지가 있다. Assertion을 이용한 방법 ( as ) instanceof를 이용한 방법 ♟️ Assertion을 이욯한 방법 Assertion을 이용한 방법은 특정 dom을 찾았을때 해당 명령어의 가장 오른쪽에 as 를 붙이고 자신이 원하는 태그를 사용한다. 위의 코드와 같이 어떤 HTML인지 as를 통해 지정하면 된다. 만약 어떤 HTML의 타입이 있는지 모른다면 일단 HTML을 붙이고 자신이 사용하는 태그를 함께 붙여보자 거의 다 그렇게 나온다. ex : a태그 = HTML + a = HTMLAnchorElement\r\nex2: span태그 = HTML + span = HTMLSpanElement 🪅 instanceof를 이용한 방법 instanceof는 …","frontmatter":{"categories":"Typescript","title":"TypeScript HTML조작법","date":"June 02, 2024"},"fields":{"slug":"/typescript-html/"}}},{"node":{"id":"1553938e-cadc-5dee-8aad-ece21ba5d552","excerpt":"타입스크립트의 조건문을 이용한 타입생성 타입스크립트에는 조건문을 이용하여 타입을 생성하는 방법을 지원하는데 이를 조건부 타입(Conditional Types)이라 한다. 조건부 타입은 정확히 말해서 자신이 입력한 제네릭 타입에 따라 true일때 타입과 false 일때 타입을 정하여 사용하는 방법이다. 🔥 조건부 타입 조건부 타입은 자바스크립트에서 삼항연산자를 사용해본 사람들이라면 많이 익숙할 것이다. 아래의 예제를 한번 보도록 하자 이 예제는 Conditional 타입에 string을 넘겨주면 true 일때 string을 넘겨주고 string이 아니라면 any 타입을 넘겨주는 조건문이다. 실행 흐름은 아래와 같다. conditional 제네릭으로 string 타입전달 전달받은 제네틱을 T로 전달하여 string 타입과 유효한지 확인 true라면 string을 반환 false라면 any를 반환 💧 분산 조건부 타입 그럼 만약 위의 조건문에 유니언타입을 넣으면 어떤 결과가 발생할까? …","frontmatter":{"categories":"Typescript","title":"타입스크립트 조건문을 이용한 타입생성","date":"June 01, 2024"},"fields":{"slug":"/typescript-Conditional Types/"}}},{"node":{"id":"4294e98b-1c29-5ccd-8c63-2e25b0799005","excerpt":"타입스크립트의 타입 확정 타입스크립트에서는 타입을 확정하기 위한 방법이 존재한다. 이러한 방법 2가지를 Narrowing과 Assertion으로 부르는데 이번에는 이 2가지에 대해 알아보도록 하자 타입을 설정한 대로 인식하게 하는 Assertion Assertion은 타입을 다른 타입으로 변경하는 것이 아닌 이 타입으로 생각해라~ 라는 의미이다. 즉 string 타입을 number로 Assertion한다고 number로 바뀌는 것은 아니라는 의미이다 다음 코드를 보면 as를 통해 foo의 타입을 Foo로 타입 표명하여 foo.bar, foo.bas로 접근하여 값을 수정할 수 있게 되었다 원래는 해당 방법 없이 foo에 접근하려 하면 bar와 bas가 없다는 오류를 발생시킨다. 이처럼 as는 타입을 사용하여 일시적으로 해당 타입으로 인식시키는 것이 가능하지만 이를 너무 악용할시 타입스크립트를 사용하는 의미가 없어질 수도 있으니 주의해서 사용해야한다! 타입의 범위를 줄이는 Narrow…","frontmatter":{"categories":"Typescript","title":"TypeScript Narrowing과 Assertion","date":"June 01, 2024"},"fields":{"slug":"/typescript-nr-ar/"}}},{"node":{"id":"00ce6c0f-c0ce-5429-a4ac-c9d2f095edcf","excerpt":"class 생성시 타입 지정방법 이번 포스팅은 class를 생성할때 타입스크립트로 타입을 지정하는 방법에 대해 알아보겠다. 자바를 사용해본 사람이라면 마치 자바를 쓰는 것 같은 느낌을 받을 수 있을 것이다. 해당 코드와 같이 constructor에 this.객체이름 = 값을 지정하기 전 위에서 해당 변수의 존재를 알려주어야 하는데 이 부분이 굉장히 자바와 흡사한 면을 가지고 있다. 그래서 자바를 익힌 사람이라면 어렵지 않게 익숙해질 수 있을것이다. 하지만 익히지 않은 사람이라면 이것을 기억하자 constructor를 사용할때는 반드시 constructor 이전에 변수의 존재와 변수의 타입을 알려야한다 클래스에서 매개변수 자리에 타입을 지정하기 위에서는 아무런 매개변수를 가지지 않고 고정된 값을 가지는 변수 하나만을 만들어 보았다 이번에는 매개변수를 이용하여 유동적인 클래스를 제작하고 타입을 지정해보겠다. 고정값과 constructor ()안에 매개변수의 이름을 정하고 : 옆에 타입…","frontmatter":{"categories":"Typescript","title":"class를 만들때 타입지정하는 방법","date":"June 01, 2024"},"fields":{"slug":"/typescript-class/"}}},{"node":{"id":"4f492df1-cfce-5f11-b344-20d4e941f83f","excerpt":"타입스크립트의 readOnly로 상수 만들기 ☀️ 타입스크립트에는 readOnly라는 키워드가 존재한다 해당 키워드는 자바스크립트를 사용해본 사람이라면 접해보는 const와 비슷하다고 생각하면 쉬운데 const는 값을 변경할 수 없는 수 즉 상수를 만드는 키워드이다 하지만 객체나 배열은 const로 만든다 하여도 그 아의 값 까지 변경이 불가능 하게 되는것은 아니기에 다소 만족스러운 결과를 얻을 수는 없다. 여기서 타입스크립트를 사용한다면 객체의 값을 readOnly로 지정하여 값을 변경하지 못하도록 할 수 있다. 타입스크립트 readOnly 사용 🌝 타입스크립트의 readonly Interface & type 2가지 방법 모두 사용 할 수 있으며 사용 방법은 아래와 같다. 위와 같이 정의하고 변수에 타입을 지정하여 사용하면 해당 객체는 더이상 변경 할 수 없는 객체로 지정되어 값이 변경되지 않는다고 확신 할 수 있게 된다. readOnly의 값을 변경하는 방법 🪐 위에서는 객체의 …","frontmatter":{"categories":"Typescript","title":"TypeScript readOnly로 변경 막기","date":"June 01, 2024"},"fields":{"slug":"/typescript-readOnly/"}}},{"node":{"id":"7c10b22f-953a-5f34-9c89-17959f9c4052","excerpt":"함수에 타입 지정하는 방법( 매개변수 and 리턴타입 ) 이번 포스팅은 아주 간단하게 함수의 매개변수 자리와 리턴 타입을 지정하는 방법에 대해 알아볼 것이다. 함수의 매개변수에 타입지정법 우선 아래와 같은 함수가 있다고 하자 이 함수에서 a라는 매개변수는 아무런 타입도 정의되어 있지 않아 any 타입인 상태이다. 여기서 a 타입에 타입을 주고 싶다면 2가지 방법이 존재하는데 하나는 모든 매개변수에 타입을 입력하는 것이고 또 하나는 타입 변수( type alias )를 사용하는 방법이다 Type alias (별명)을 사용하여 매개변수의 타입지정 이전에 포스팅한 내용과 거의 다를게 없다. 거두절미하고 바로 코드를 보도록 하자 위의 코드와 같이 화살표 함수로 작성된 변수 이름옆에 이전 포스팅에서 변수에 타입을 주었던 것 처럼 사용하면 함수에도 type alias를 적용 할 수 있다.  화살표 함수만 해당 방법을 사용 할 수 있다. 선언문 형태( function )은 아래의 직접지정 \r\n…","frontmatter":{"categories":"Typescript","title":"TypeScript 함수에 타입지정하는 방법","date":"May 29, 2024"},"fields":{"slug":"/typescript-functionType/"}}},{"node":{"id":"38d0b3e7-0bb6-5f20-b708-98f6873778e7","excerpt":"🐎타입스크립트에서 타입을 선언하는 2가지 방법 타입스크립트에서는 타입을 변수처럼 사용하기 위한 방법이 2가지가 있다. 2가지에는 큰 차이는 없으나 그 차이점에 대해서는 알아둘 필요는 있다 생각하여 함께 이번 포스팅에 함께 적도록 하겠다. 🐈‍⬛ 첫 번째 방법 type type은 interface가 나오기 이전부터 있던 타입의 선언 방법이다. 사용방법은 아래와 같다 이렇게만 보면 잘 이해가 안가니까 몇 가지의 예시를 들어보도록 하겠다. 이런식으로 자신이 원하는 이름과 타입을 형식에만 맞게 써주면 된다. 이렇게 만든 타입은 앞선 포스팅에서 사용했던 것 처럼 변수 오른쪽에 :을 붙여 사용 하면 된다. 🐯 두 번째 방법 interface interface는 타입을 정의하는 두번째 방법이며 type 다음으로 나온 최신 문법이기도 하다. interface의 사용 방법은 type과 거의 동일하여 특별히 어려운점은 없다. 위의 코드에서 이상함을 느낄 수 있는데 interface는 type과 다르게 …","frontmatter":{"categories":"Typescript","title":"TypeScript 타입을 지정하는 2가지 방법","date":"May 29, 2024"},"fields":{"slug":"/typescript-type-Interface/"}}},{"node":{"id":"274324fe-4fb7-5b61-be18-f598da47ed3d","excerpt":"🙋‍♀️ 타입스크립트 타입의 종류 중요한가..? 이번 포스팅은 타입스크립트의 타입의 종류에 관한 포스팅이다. 당연한 말이지만 타입스크립트에서는 타입을 아는 것이 굉장히 중요하다 자신이 타입스크립트를 사용할때도 물론 중요하지만 요즘같이 대부분 타입스크립트를 프로젝트에 도입하는 추세에서는 다른사람의 코드를 읽기 위해서 사실상 타입스크립트를 아는 것은 반필수라고 생각한다. 물론 타입만 안다고 읽을 수 있을정도로 간단하지는 않지만 기본적인 타입과 union, any등을 모르면 읽을 엄두도 낼 수 없기에 이런 기초적인 타입일 수록 정말 중요하다. 👨‍🍼 타입스크립트의 타입의 종류 타입스크립트는 변수를 만들때 타입의 지정이 가능하다. 위의 코드는 값으로 string 형태의 값만을 받는다는 의미의 변수이다. 정말 간단하게 변수 : 타입 만약 다른 타입의 값을 대입하려고 시도한다면 에러를 띄우는 모습을 볼 수 있다. 형태로 지정만하면 쉽게 타입을 지정할 수 있고 변수의 이름도 직관적이기 때문에 금방 익힐…","frontmatter":{"categories":"Typescript","title":"TypeScript의 타입 종류","date":"May 28, 2024"},"fields":{"slug":"/typescript-type/"}}},{"node":{"id":"b3204537-2fea-5dee-b0d0-72b2c8610a58","excerpt":"😾 타입스크립트 기본 세팅 이번 포스팅은 리엑트에서 타입스크립트를 사용하는 방법에 대해 알아보도록 하겠다. 타입스크립트가 무엇인지는 알고 있다고 생각하고 진행할 예정이라 따로 타입스크립트에 관한 만들어지게 된 계기 같은건 설명하지 않고 이번에도 사용 방법을 위주로 쭉 포스팅을 하게 될 것이다. 리엑트에서 타입스크립트 세팅하는법 ( CRA로 간편하게 ) 이번 포트팅의 가장 핵심은 세팅하는 방법에 대해 알아보자 세팅은 CRA를 사용하여 기본적은 템플릿을 받아오는 방법을 사용할 것이다. (수동으로 하는 방법은 추후 업로드 예정) 리엑트에서 연습용 폴더 하나를 만들고 아래와 같이 입력하여 새로운 리엑트 템플릿을 생성하자.\r\n\r\n생성이 완료 되었다면 jsx 확장자가 아닌 컴포넌트 파일들이 모두 tsx 확장자로 바뀐 것을 확인 할 수 있을것이다. 성공시 파일 구조 😽 포스트를 마치며 다음 포스트는 타입스크립트의 타입에 관한 포스팅을 진행하도록 하겠다.","frontmatter":{"categories":"Typescript","title":"TypeScript 기본 세팅","date":"May 28, 2024"},"fields":{"slug":"/typescript-setting/"}}},{"node":{"id":"6e04b70e-74d9-55a8-a465-80c1f50c8643","excerpt":"🙄 SSR & CSR에 대하여 이번 포스팅은 Next JS의 SSR 및 CSR에 대한 글을 작성하고자 한다. 하지만 그전에 SSR과 CSR에 대해 가볍게 어떤 개념인지 알아보고 넘어가도록 하자 SSR이란? SSR은 Server-side-Rendering의 약자로 React,Vue와 같은 CSR과는 반대되는 개념이다. SSR은 서버에서 HTML,CSS,JS를 연결하고 랜더링 준비를 마치면 클라이언트에서는 이미 준비된 HTML을 받아 그대로 랜더링을 하는 것이다. CSR이란? CSR은 위의 SSR의 반대되는 개념으로 빈 HTML을 서버로 받아와 클라이언트에서 함께 받아온 JS 파일을 파싱하여 빈 HTML에 동적으로 삽입하여 만드는 방식이다. 😶 이런 방식에는 어떤 차이가 있을까? SSR과 CSR은 각각의 명확한 장단점을 가진다. 그 장단점은 아래와 같다. CSR 장점 View 렌더링을 브라우저에게 담당시킹으로 서버의 부하가 줄어든다. 네이티브 앱과 같은 경험을 제공한다.( 부드러운 페…","frontmatter":{"categories":"Next_JS","title":"Next JS의 SSR CSR 설정 및 차이점","date":"May 26, 2024"},"fields":{"slug":"/next-component/"}}},{"node":{"id":"bd212c49-bb1e-5f75-9410-d267e659c824","excerpt":"😽 NEXT JS 에서 제공하는 이미지 사용법 이번 포스팅은 Next Js에서 제공하는 이미지를 자동윽로 최적화해주는 패키지의 사용법에 대해 알아보겠다. 일반 이미지와 비슷한 사용 방법을 가지고 있으나 외부 이미지를 사용하려할때는 약간의 설정이 필요하니 그 부분만 조심하면 성능개선에 많은 도움이 될 것이다. Next Js의 Image 컴포넌트 사용법 이미지 최적화를 위해 Image를 사용하는 방법은 Next Js에서 Image라는 컴포넌트를 import해와서 사용하여야 하는데 아래와 같은 import 구문을 자신의 page.js 혹은 Layout.js에 추가하도록 하자 위와 같이 import한 뒤 해당 컴포넌트를 사용할곳에 적고 img 태그를 사용 하던 것 처럼 src 속성 및 alt 속성을 추가한다. 하지만 여기서 src 경로는 이미지와는 다르게 넣어야 하는데 img 태그는 src에 경로를 직접넣는 반면 Image 컴포넌트는 이미지를 import로 가져와서 import한 이미지를…","frontmatter":{"categories":"Next_JS","title":"Next Js에서 제공하는 이미지 사용법","date":"May 25, 2024"},"fields":{"slug":"/next-useImg/"}}},{"node":{"id":"45064605-d538-5444-93fc-906b4d888752","excerpt":"🥸 Next Js에서 라우팅에 대하여 저번 포스팅에서는 Next JS의 각 폴더의 역할과 LayOut, Page 의 관계에 대해 간략하게 나마 알아보았는데 이번에는 리엑트를 하던 사람들은 많이 해보거나 들어보았을 라우팅 처리에 관한 내용으로 포스팅을 진행하고자 한다. 라우팅이란? 라우팅은 쉽게 말해서 사용자가 요청한 url에 맞는 페이지를 보여 줄 수 있도록 하는 로직을 말하는 것이다. 리엑트에서는 react-router-dom을 사용하는게 일반적이였지만 Next Js는 버전이 업그레이드 되면서 편리하게 라우팅 처리를 할 수 있도록 바뀌었다. ✍️ Next Js 14버전 이후의 라우팅 방법( 정적 라우팅 ) 우선 Next 14 버전 이상만 해당 라우팅 방법을 사용 할 수 있으며 만약 따라했는데 안 된다면 자신의 Next js의 버전이 14버전 이상인지 부터 확인하도록 하자 라우팅 경로 폴더 생성 우선 라우팅 경로를 설정하기 위해서는 page.js가 있는 파일에 로 감싸진 폴더를 하나…","frontmatter":{"categories":"Next_JS","title":"Next JS에서 라우팅 하는법","date":"May 25, 2024"},"fields":{"slug":"/next-route/"}}},{"node":{"id":"3f046e2e-2493-5c94-a344-0b0480f5ce44","excerpt":"👋Next Js 폴더의 역할에 대하여 이번 포스팅은 저번 포스팅에서 이야기 한 것 처럼 CNA를 통해 제작한 템플릿의 폴더가 각각 어떠한 역할을 하는지에 대해 알아보겠다. ✍️알아볼 폴더의 종류 우리가 알아볼 폴더의 구조는 아래의 이미지에서 보이듯 최상위의 파일과 app안의 파일들에 대해 알아 볼 것이다. ✨ 각 폴더의 역할 🎲 최상위 폴더 App : Next Js의 페이지를 구성하는 파일로 가장 상위의 파일이 app이라는 폴더이다 이곳에서 추가적인 라우팅 처리등을 하여 페이지를 생성한다. node_modules : npm or yarn과 같은 패키지 매니저를 이용하여 다운한 패키지들을 보관하는 폴더이다. public : 개발시 이미지 폰트등 정적인 요소들이 들어가는 파일이다 이곳에 들어가는 파일들은 번들링시 이름이 변경되지 않고 절대경로를 사용 할 수 있는 이점이있다. .gitignore : 이 파일은 github에 올라가면 안 되는 민감한 파일들을 등록하여 git을 이용하여 gi…","frontmatter":{"categories":"Next_JS","title":"Next JS의 각 폴더별 역할","date":"May 25, 2024"},"fields":{"slug":"/next-folder/"}}},{"node":{"id":"818b2485-2d3e-5b3d-a1e5-7b1cf4976ea8","excerpt":"👋 이번 포스팅에 대하여 이 블로그의 첫 포스팅은 이전 블로그에서 적으려 했던 Next Js에 대한 주제로 계속 이어나갈까한다. 본래는 모든 내용을 여기로 옮기고 이 블로그를 계속 이어나갈까 생각도 하였지만 그러기에는 워낙 시간이 오래 걸릴 것 같아 velog의 내용을 이어가기로 결정하였다. 만일 이전 블로그의 글이 궁금하다면 위의 header 부분에 존재하는 PrevBlog를 보도록 하자 또한 Next JS에 대한 포스팅은 최종적으로 Mongoose를 이용하여 게시판을 제작하는 것을 목표로 계속 포스팅을 올릴 예정이다. ✍️ 시작하기 앞서 필요한 세팅 Next Js를 하기 위해서는 최신버전의 Node가 깔려 있는지 확인할 필요가 있으므로 cmd에 아래의 명령어를 입력하여 노드가 최신버전 18버전 이상인지 확인하도록 하자 ✨ CNA를 통한 Next Js 기본 템플릿 생성 이 블로그는 최대한 이론과 실습을 분리하여 진행할 예정이므로 방법을 설명할때는 최대한 이론을 베재하고 사용방법만을…","frontmatter":{"categories":"Next_JS","title":"Next Js 개발환경 세팅","date":"May 21, 2024"},"fields":{"slug":"/next-createNext/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"김창규","bio":{"role":"개발자","description":["더 좋은 코드를 생각하는","가치있는 것을 만드는","사용이 아닌 활용을 하는"],"thumbnail":"sample.png"},"social":{"github":"https://github.com/fefdfea1","linkedIn":"","email":"cankyu6@gmail.com"}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}