{"componentChunkName":"component---src-templates-blog-template-js","path":"/typescript-readOnly/","result":{"data":{"cur":{"id":"4f492df1-cfce-5f11-b344-20d4e941f83f","html":"<h1 id=\"타입스크립트의-readonly로-상수-만들기-️\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-readonly%EB%A1%9C-%EC%83%81%EC%88%98-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EF%B8%8F\" aria-label=\"타입스크립트의 readonly로 상수 만들기 ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 readOnly로 상수 만들기 ☀️</h1>\n<p>타입스크립트에는 readOnly라는 키워드가 존재한다 해당 키워드는 자바스크립트를 사용해본 사람이라면 접해보는 const와 비슷하다고 생각하면 쉬운데 const는 값을 변경할 수 없는 수 즉 상수를 만드는 키워드이다 하지만 객체나 배열은 const로 만든다 하여도 그 아의 값 까지 변경이 불가능 하게 되는것은 아니기에 다소 만족스러운 결과를 얻을 수는 없다. 여기서 타입스크립트를 사용한다면 객체의 값을 readOnly로 지정하여 값을 변경하지 못하도록 할 수 있다.</p>\n<h2 id=\"타입스크립트-readonly-사용-\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-readonly-%EC%82%AC%EC%9A%A9-\" aria-label=\"타입스크립트 readonly 사용  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 readOnly 사용 🌝</h2>\n<p>타입스크립트의 readonly Interface &#x26; type 2가지 방법 모두 사용 할 수 있으며 사용 방법은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  readonly b <span class=\"token operator\">:</span> string\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">c</span> <span class=\"token punctuation\">{</span>\r\n  readonly n <span class=\"token operator\">:</span> number\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<p>위와 같이 정의하고 변수에 타입을 지정하여 사용하면 해당 객체는 더이상 변경 할 수 없는 객체로 지정되어 값이 변경되지 않는다고 확신 할 수 있게 된다.</p>\n<h2 id=\"readonly의-값을-변경하는-방법-\" style=\"position:relative;\"><a href=\"#readonly%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B3%80%EA%B2%BD%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-\" aria-label=\"readonly의 값을 변경하는 방법  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>readOnly의 값을 변경하는 방법 🪐</h2>\n<p>위에서는 객체의 값을 readOnly로 지정해두면 변경이 불가능 하다고 하였다. 하지만 두가지 방법이 있는데 클래스에 constructor를 지정하여 변경하는 방법과 객체 안의 객체가 지정되었을시에만 사용 가능한 방법이다 해당 방법을 바로 코드로 구현하여 보도록 하자</p>\n<h3 id=\"첫-번째-방법-\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95-\" aria-label=\"첫 번째 방법  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 번째 방법 ⭐</h3>\n<p>아래의 상황은 하나의 객체만 사용된 barA를 변경하려는 코드이다 이렇게 2개가 중첩되어 있지 않은 코드는 변경이 불가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type readonlyA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  readonly barA<span class=\"token operator\">:</span> string\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> readonlyA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">barA</span><span class=\"token operator\">:</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\nx<span class=\"token punctuation\">.</span>barA <span class=\"token operator\">=</span> <span class=\"token string\">'quux'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ⛔️ 변경 불가</span></code></pre></div>\n<p>해당 코드는 barB가 baz라는 또 다른 객체값을 가지는 코드이다 이렇게 되면 readOnly는 BarB에는 적용이 되지만 baz에는 적용이 불가능한 모습을 보여준다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type readonlyB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  readonly barB<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> readonlyB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">barB</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">baz</span><span class=\"token operator\">:</span> <span class=\"token string\">'quux'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\ny<span class=\"token punctuation\">.</span>barB<span class=\"token punctuation\">.</span>baz <span class=\"token operator\">=</span> <span class=\"token string\">'zebranky'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👌 변경 가능</span></code></pre></div>\n<h3 id=\"두-번재-방법-\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EB%B2%88%EC%9E%AC-%EB%B0%A9%EB%B2%95-\" aria-label=\"두 번재 방법  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 번재 방법 🌟</h3>\n<p>두 번째 방법은 위에서 말했듯 constructor를 이용하여 변경하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\r\n    readonly bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n    readonly baz<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baz <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드와 같이 readOnly로 선언한 baz는 constructor의 this로 접근하여 변경이 가능하다</p>","excerpt":"타입스크립트의 readOnly로 상수 만들기 ☀️ 타입스크립트에는 readOnly라는 키워드가 존재한다 해당 키워드는 자바스크립트를 사용해본 사람이라면 접해보는 const와 비슷하다고 생각하면 쉬운데 const는 값을 변경할 수 없는 수 즉 상수를 만드는 키워드이다 하지만 객체나 배열은 const로 만든다 하여도 그 아의 값 까지 변경이 불가능 하게 되는것은 아니기에 다소 만족스러운 결과를 얻을 수는 없다. 여기서 타입스크립트를 사용한다면 객체의 값을 readOnly로 지정하여 값을 변경하지 못하도록 할 수 있다. 타입스크립트 readOnly 사용 🌝 타입스크립트의 readonly Interface & type 2가지 방법 모두 사용 할 수 있으며 사용 방법은 아래와 같다. 위와 같이 정의하고 변수에 타입을 지정하여 사용하면 해당 객체는 더이상 변경 할 수 없는 객체로 지정되어 값이 변경되지 않는다고 확신 할 수 있게 된다. readOnly의 값을 변경하는 방법 🪐 위에서는 객체의 …","frontmatter":{"date":"June 01, 2024","title":"TypeScript readOnly로 변경 막기","categories":"Typescript","author":"fefdfea","emoji":"🐕"},"fields":{"slug":"/typescript-readOnly/"}},"next":{"id":"7c10b22f-953a-5f34-9c89-17959f9c4052","html":"<h1 id=\"함수에-타입-지정하는-방법-매개변수-and-리턴타입-\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90-%ED%83%80%EC%9E%85-%EC%A7%80%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-and-%EB%A6%AC%ED%84%B4%ED%83%80%EC%9E%85-\" aria-label=\"함수에 타입 지정하는 방법 매개변수 and 리턴타입  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에 타입 지정하는 방법( 매개변수 and 리턴타입 )</h1>\n<p>이번 포스팅은 아주 간단하게 함수의 매개변수 자리와 리턴 타입을 지정하는 방법에 대해 알아볼 것이다.</p>\n<h2 id=\"함수의-매개변수에-타입지정법\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%97%90-%ED%83%80%EC%9E%85%EC%A7%80%EC%A0%95%EB%B2%95\" aria-label=\"함수의 매개변수에 타입지정법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 매개변수에 타입지정법</h2>\n<p>우선 아래와 같은 함수가 있다고 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">function</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 함수에서 a라는 매개변수는 아무런 타입도 정의되어 있지 않아 any 타입인 상태이다. 여기서 a 타입에 타입을 주고 싶다면 2가지 방법이 존재하는데 하나는 모든 매개변수에 타입을 입력하는 것이고 또 하나는 타입 변수( type alias )를 사용하는 방법이다</p>\n<ul>\n<li>\n<h3 id=\"type-alias-별명을-사용하여-매개변수의-타입지정\" style=\"position:relative;\"><a href=\"#type-alias-%EB%B3%84%EB%AA%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%9D%98-%ED%83%80%EC%9E%85%EC%A7%80%EC%A0%95\" aria-label=\"type alias 별명을 사용하여 매개변수의 타입지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type alias (별명)을 사용하여 매개변수의 타입지정</h3>\n<p>이전에 포스팅한 내용과 거의 다를게 없다. 거두절미하고 바로 코드를 보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type <span class=\"token function-variable function\">타입</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">매개변수 이름<span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> 함수의 <span class=\"token keyword\">return</span>타입\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">function</span><span class=\"token operator\">:</span><span class=\"token function-variable function\">타입</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">매개변수</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드와 같이 화살표 함수로 작성된 변수 이름옆에 이전 포스팅에서 변수에 타입을 주었던 것 처럼 사용하면 함수에도 type alias를 적용 할 수 있다.</p>\n<blockquote>\n<p><strong> 화살표 함수만 해당 방법을 사용 할 수 있다. 선언문 형태( function )은 아래의 직접지정 </strong>\r\n방법으로 정해주는 것은 가능하다.</p>\n</blockquote>\n</li>\n<li>\n<h3 id=\"직접-매개변수의-타입지정\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%9D%98-%ED%83%80%EC%9E%85%EC%A7%80%EC%A0%95\" aria-label=\"직접 매개변수의 타입지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직접 매개변수의 타입지정</h3>\n<p>이번에는 직접 매개변수에 지정해주는 방법에 대해 알아보자</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">function</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  코드 <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>직접지정하는 방식은 위와같이 그냥 ()내부의 변수에 : 를 붙이고 원하는 타입을 지정해주면 되는 것이다. 참고로 선언문에서도 return 타입을 지정해줄 수 있는데 () 오른쪽에 지정해주면 된다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>리턴 <span class=\"token parameter\">타입</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  코드 <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"이번-포스팅의-결론\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88-%ED%8F%AC%EC%8A%A4%ED%8C%85%EC%9D%98-%EA%B2%B0%EB%A1%A0\" aria-label=\"이번 포스팅의 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번 포스팅의 결론</h2>\n<p>결국 이번포스팅에서 기억하면 될 것은 각 표현식 , 선언문에서 타입을 지정하는 방법, 리턴되는 타입을 지정하는 방법에 대해서만 기억해주고 넘어가면 된다. 아래의 코드들만 기억하자</p>\n<ul>\n<li>\n<h3 id=\"표현식에서-타입지정\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%EC%8B%9D%EC%97%90%EC%84%9C-%ED%83%80%EC%9E%85%EC%A7%80%EC%A0%95\" aria-label=\"표현식에서 타입지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현식에서 타입지정</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type <span class=\"token function-variable function\">타입</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">매개변수 이름<span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> 함수의 <span class=\"token keyword\">return</span>타입\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">function</span><span class=\"token operator\">:</span><span class=\"token function-variable function\">타입</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">매개변수</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<h3 id=\"선언문에서-타입지정\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%EB%AC%B8%EC%97%90%EC%84%9C-%ED%83%80%EC%9E%85%EC%A7%80%EC%A0%95\" aria-label=\"선언문에서 타입지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언문에서 타입지정</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span>타입<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>타입<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>리턴 <span class=\"token parameter\">타입</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  코드 <span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"date":"May 29, 2024","title":"TypeScript 함수에 타입지정하는 방법","categories":"Typescript","author":"fefdfea","emoji":"🥌"},"fields":{"slug":"/typescript-functionType/"}},"prev":{"id":"00ce6c0f-c0ce-5429-a4ac-c9d2f095edcf","html":"<h1 id=\"class-생성시-타입-지정방법\" style=\"position:relative;\"><a href=\"#class-%EC%83%9D%EC%84%B1%EC%8B%9C-%ED%83%80%EC%9E%85-%EC%A7%80%EC%A0%95%EB%B0%A9%EB%B2%95\" aria-label=\"class 생성시 타입 지정방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>class 생성시 타입 지정방법</h1>\n<p>이번 포스팅은 class를 생성할때 타입스크립트로 타입을 지정하는 방법에 대해 알아보겠다. 자바를 사용해본 사람이라면 마치 자바를 쓰는 것 같은 느낌을 받을 수 있을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 코드와 같이 constructor에 this.객체이름 = 값을 지정하기 전 위에서 해당 변수의 존재를 알려주어야 하는데 이 부분이 굉장히 자바와 흡사한 면을 가지고 있다. 그래서 자바를 익힌 사람이라면 어렵지 않게 익숙해질 수 있을것이다. 하지만 익히지 않은 사람이라면 이것을 기억하자 <strong>constructor를 사용할때는 반드시 constructor 이전에 변수의 존재와 변수의 타입을 알려야한다</strong></p>\n<h3 id=\"클래스에서-매개변수-자리에-타입을-지정하기\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%9E%90%EB%A6%AC%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"클래스에서 매개변수 자리에 타입을 지정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스에서 매개변수 자리에 타입을 지정하기</h3>\n<p>위에서는 아무런 매개변수를 가지지 않고 고정된 값을 가지는 변수 하나만을 만들어 보았다 이번에는 매개변수를 이용하여 유동적인 클래스를 제작하고 타입을 지정해보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">변수<span class=\"token number\">1</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> 변수<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>고정값과 constructor ()안에 매개변수의 이름을 정하고 : 옆에 타입을 정하면 위의 코드에서 처럼 타입을 지정해줄 수 있으며 기존에 “kim”으로 고정값으로 들어가는 자리를 변수1로 변경함으로서 이제 해당 클래스는 유동적으로 값을 생성 할 수 있게 되었다. 심지어 타입을 지정하여 원치 않는 값이 들어가는 것을 막아 더욱 안전해졌다.</p>","frontmatter":{"date":"June 01, 2024","title":"class를 만들때 타입지정하는 방법","categories":"Typescript","author":"fefdfea","emoji":"😺"},"fields":{"slug":"/typescript-class/"}},"site":{"siteMetadata":{"siteUrl":"https://fefdfea1.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/typescript-readOnly/","nextSlug":"/typescript-functionType/","prevSlug":"/typescript-class/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}