{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Typescript","result":{"pageContext":{"currentCategory":"Typescript","categories":["All","Typescript","Next_JS"],"edges":[{"node":{"id":"4f492df1-cfce-5f11-b344-20d4e941f83f","excerpt":"타입스크립트의 readOnly로 상수 만들기 ☀️ 타입스크립트에는 readOnly라는 키워드가 존재한다 해당 키워드는 자바스크립트를 사용해본 사람이라면 접해보는 const와 비슷하다고 생각하면 쉬운데 const는 값을 변경할 수 없는 수 즉 상수를 만드는 키워드이다 하지만 객체나 배열은 const로 만든다 하여도 그 아의 값 까지 변경이 불가능 하게 되는것은 아니기에 다소 만족스러운 결과를 얻을 수는 없다. 여기서 타입스크립트를 사용한다면 객체의 값을 readOnly로 지정하여 값을 변경하지 못하도록 할 수 있다. 타입스크립트 readOnly 사용 🌝 타입스크립트의 readonly Interface & type 2가지 방법 모두 사용 할 수 있으며 사용 방법은 아래와 같다. 위와 같이 정의하고 변수에 타입을 지정하여 사용하면 해당 객체는 더이상 변경 할 수 없는 객체로 지정되어 값이 변경되지 않는다고 확신 할 수 있게 된다. readOnly의 값을 변경하는 방법 🪐 위에서는 객체의 …","fields":{"slug":"/typescript-readOnly/"},"frontmatter":{"categories":"Typescript","title":"TypeScript readOnly로 변경 막기","date":"June 01, 2024"}},"next":{"fields":{"slug":"/typescript-functionType/"}},"previous":null},{"node":{"id":"7c10b22f-953a-5f34-9c89-17959f9c4052","excerpt":"함수에 타입 지정하는 방법( 매개변수 and 리턴타입 ) 이번 포스팅은 아주 간단하게 함수의 매개변수 자리와 리턴 타입을 지정하는 방법에 대해 알아볼 것이다. 함수의 매개변수에 타입지정법 우선 아래와 같은 함수가 있다고 하자 이 함수에서 a라는 매개변수는 아무런 타입도 정의되어 있지 않아 any 타입인 상태이다. 여기서 a 타입에 타입을 주고 싶다면 2가지 방법이 존재하는데 하나는 모든 매개변수에 타입을 입력하는 것이고 또 하나는 타입 변수( type alias )를 사용하는 방법이다 Type alias (별명)을 사용하여 매개변수의 타입지정 이전에 포스팅한 내용과 거의 다를게 없다. 거두절미하고 바로 코드를 보도록 하자 위의 코드와 같이 화살표 함수로 작성된 변수 이름옆에 이전 포스팅에서 변수에 타입을 주었던 것 처럼 사용하면 함수에도 type alias를 적용 할 수 있다.  화살표 함수만 해당 방법을 사용 할 수 있다. 선언문 형태( function )은 아래의 직접지정 \r\n…","fields":{"slug":"/typescript-functionType/"},"frontmatter":{"categories":"Typescript","title":"TypeScript 함수에 타입지정하는 방법","date":"May 29, 2024"}},"next":{"fields":{"slug":"/typescript-type-Interface/"}},"previous":{"fields":{"slug":"/typescript-readOnly/"}}},{"node":{"id":"38d0b3e7-0bb6-5f20-b708-98f6873778e7","excerpt":"🐎타입스크립트에서 타입을 선언하는 2가지 방법 타입스크립트에서는 타입을 변수처럼 사용하기 위한 방법이 2가지가 있다. 2가지에는 큰 차이는 없으나 그 차이점에 대해서는 알아둘 필요는 있다 생각하여 함께 이번 포스팅에 함께 적도록 하겠다. 🐈‍⬛ 첫 번째 방법 type type은 interface가 나오기 이전부터 있던 타입의 선언 방법이다. 사용방법은 아래와 같다 이렇게만 보면 잘 이해가 안가니까 몇 가지의 예시를 들어보도록 하겠다. 이런식으로 자신이 원하는 이름과 타입을 형식에만 맞게 써주면 된다. 이렇게 만든 타입은 앞선 포스팅에서 사용했던 것 처럼 변수 오른쪽에 :을 붙여 사용 하면 된다. 🐯 두 번째 방법 interface interface는 타입을 정의하는 두번째 방법이며 type 다음으로 나온 최신 문법이기도 하다. interface의 사용 방법은 type과 거의 동일하여 특별히 어려운점은 없다. 위의 코드에서 이상함을 느낄 수 있는데 interface는 type과 다르게 …","fields":{"slug":"/typescript-type-Interface/"},"frontmatter":{"categories":"Typescript","title":"TypeScript 타입을 지정하는 2가지 방법","date":"May 29, 2024"}},"next":{"fields":{"slug":"/typescript-type/"}},"previous":{"fields":{"slug":"/typescript-functionType/"}}},{"node":{"id":"274324fe-4fb7-5b61-be18-f598da47ed3d","excerpt":"🙋‍♀️ 타입스크립트 타입의 종류 중요한가..? 이번 포스팅은 타입스크립트의 타입의 종류에 관한 포스팅이다. 당연한 말이지만 타입스크립트에서는 타입을 아는 것이 굉장히 중요하다 자신이 타입스크립트를 사용할때도 물론 중요하지만 요즘같이 대부분 타입스크립트를 프로젝트에 도입하는 추세에서는 다른사람의 코드를 읽기 위해서 사실상 타입스크립트를 아는 것은 반필수라고 생각한다. 물론 타입만 안다고 읽을 수 있을정도로 간단하지는 않지만 기본적인 타입과 union, any등을 모르면 읽을 엄두도 낼 수 없기에 이런 기초적인 타입일 수록 정말 중요하다. 👨‍🍼 타입스크립트의 타입의 종류 타입스크립트는 변수를 만들때 타입의 지정이 가능하다. 위의 코드는 값으로 string 형태의 값만을 받는다는 의미의 변수이다. 정말 간단하게 변수 : 타입 만약 다른 타입의 값을 대입하려고 시도한다면 에러를 띄우는 모습을 볼 수 있다. 형태로 지정만하면 쉽게 타입을 지정할 수 있고 변수의 이름도 직관적이기 때문에 금방 익힐…","fields":{"slug":"/typescript-type/"},"frontmatter":{"categories":"Typescript","title":"TypeScript의 타입 종류","date":"May 28, 2024"}},"next":{"fields":{"slug":"/typescript-setting/"}},"previous":{"fields":{"slug":"/typescript-type-Interface/"}}},{"node":{"id":"b3204537-2fea-5dee-b0d0-72b2c8610a58","excerpt":"😾 타입스크립트 기본 세팅 이번 포스팅은 리엑트에서 타입스크립트를 사용하는 방법에 대해 알아보도록 하겠다. 타입스크립트가 무엇인지는 알고 있다고 생각하고 진행할 예정이라 따로 타입스크립트에 관한 만들어지게 된 계기 같은건 설명하지 않고 이번에도 사용 방법을 위주로 쭉 포스팅을 하게 될 것이다. 리엑트에서 타입스크립트 세팅하는법 ( CRA로 간편하게 ) 이번 포트팅의 가장 핵심은 세팅하는 방법에 대해 알아보자 세팅은 CRA를 사용하여 기본적은 템플릿을 받아오는 방법을 사용할 것이다. (수동으로 하는 방법은 추후 업로드 예정) 리엑트에서 연습용 폴더 하나를 만들고 아래와 같이 입력하여 새로운 리엑트 템플릿을 생성하자.\r\n\r\n생성이 완료 되었다면 jsx 확장자가 아닌 컴포넌트 파일들이 모두 tsx 확장자로 바뀐 것을 확인 할 수 있을것이다. 성공시 파일 구조 😽 포스트를 마치며 다음 포스트는 타입스크립트의 타입에 관한 포스팅을 진행하도록 하겠다.","fields":{"slug":"/typescript-setting/"},"frontmatter":{"categories":"Typescript","title":"TypeScript 기본 세팅","date":"May 28, 2024"}},"next":{"fields":{"slug":"/next-clintAndServerComponent/"}},"previous":{"fields":{"slug":"/typescript-type/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}