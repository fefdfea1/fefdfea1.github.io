{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Next_JS","result":{"pageContext":{"currentCategory":"Next_JS","categories":["All","Next_JS","Typescript"],"edges":[{"node":{"id":"f4d823aa-35cc-50d2-9daf-b69ba7213710","excerpt":"레이아웃 슬라이더 구현 및 전체 레이아웃 구현 이번 포스팅에서는 전체적인 레이아웃을 지금까지 만큼 컴포넌트를 이용하여 제작하고 포스팅이 좀 길어지더라도 상단의 슬라이더 부분까지 제작해볼 예정이다","fields":{"slug":"/next-shopProject5/"},"frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 최종","date":"June 25, 2024"}},"next":{"fields":{"slug":"/next-shopProject4/"}},"previous":null},{"node":{"id":"30fe37af-c2ba-5669-93fa-561cb942e6a1","excerpt":"레이아웃 구성 3 이번 포스팅에서는 저번에 만들던 컴포넌트를 이어서 모두 만들도록 하겠다. 저번에는 컴포넌트 2까지 만들었으니 3 부터 이어서 해보자 productCard 컴포넌트 제작 RecommendButton 컴포넌트 제작 rentalCard 컴포넌트 제작 컴포넌트 제작 끝 이것으로 컴포넌트 제작이 모두 끝났고 다음 포스팅 부터는 해당 컴포넌트를 이용하여 main 부분 레이아웃을 완성시키도록 하겠다.","fields":{"slug":"/next-shopProject4/"},"frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 구성3","date":"June 24, 2024"}},"next":{"fields":{"slug":"/next-shopProject3/"}},"previous":{"fields":{"slug":"/next-shopProject5/"}}},{"node":{"id":"3b7c3d0e-87bc-5497-b507-120e0ad409e9","excerpt":"쇼핑몰 레이아웃 구성 2 저번 포스팅에 이어 이번에는 main부분을 클론코딩해볼 예정이다. main 부분도 Header와 동일하게 컴포넌트로 만들 부분들을 살펴보도록 하자 컴포넌트 나누기 필자는 컴포넌트를 최대한 재사용이 가능한 부분들을 최대한 컴포넌트로 제작할 예정이다. 아래의 디자인을 보면 같은 디자인이 계속 반복되는 것을 알 수 있다. html css등은 자세히 다루지 않을 예정이나 빠르게 구현하고 넘어가도록 하겠다. 필자는 컴포넌트를 위와 같이 나눌 예정이며 상단의 슬라이드는 라이브러리를 이용하여 추후 구현하도록 하겠다. 컴포넌트 제작 컴포넌트는 해당 이미지와 같이 제작 하였으며 아래의 컴포넌트들이 추가되었다. ProductCard.tsx ProductContainer.tsx RecommendButton.tsx RentalCard.tsx ServiceCard.tsx ServiceCard 제작 컴포넌트의 제작 순서는 위의 이미지에 보이는 1 ~ 5번 순서대로 제작을 하겠다. …","fields":{"slug":"/next-shopProject3/"},"frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 구성2","date":"June 23, 2024"}},"next":{"fields":{"slug":"/next-shopProject2/"}},"previous":{"fields":{"slug":"/next-shopProject4/"}}},{"node":{"id":"c1cd7f05-6d7f-5061-8bd9-043d44108731","excerpt":"레이아웃 제작 CSS 사용중 문제 css를 사용하고 있던중 간과하고 있던 사실이 하나 있었는데 React가 아니라 Next js를 사용하고 있다는 사실을 잊어버리고 있었다. 현재 필자는 css-in-js 방식으로 css 스타일을 주려고 하였지만 emotion은 런타임 환경에서 동작하여 스타일을 주는 방식이기 때문에 서버사이드 방식을 채택하는 Next JS에서 사용에 한계가 있다. 사용이 불가능 한 것은 아니지만 쌩 HTML이 보이고 그다음 스타일이 동적으로 입혀지기 때문에 굉장히 이상하게 보인다. 이 문제에 대해서는 다음에 다루도록 하겠다. 우선 필자는 panda css를 사용하여 작업한다는 것을 알아두자 판다 css ai 사용을 안하는이유 이번 포스팅에는 본격적으로 레이아웃을 제작할 예정인데 원래 사용하려한 생성형 ai의 디자인을 사용하기가 어려울 것 같아 핀터레스트의 디자인 하나를 가져와 진행할 예정이다. 위의 이미지는 생성형 ai가준 디자인인데 ( 왼쪽은 uizard 오른쪽은…","fields":{"slug":"/next-shopProject2/"},"frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 레이아웃 구성","date":"June 21, 2024"}},"next":{"fields":{"slug":"/next-shopProject1/"}},"previous":{"fields":{"slug":"/next-shopProject3/"}}},{"node":{"id":"cfd1e495-c100-5f09-ba6a-323c9f926b4f","excerpt":"Next JS 쇼핑몰 프로젝트 기본 셋업 이번 포스팅 부터는 Next JS와 요즘 뜨고있는 생성형 AI를 이용하여 쇼핑몰 프로젝트를 진행할 것이다. 이번 포스팅은 프로젝트를 위한 기본적인 셋업을 진행할 예정이다. Front Back Node js mongoDB 프로젝트 셋업 시작 우선 프로젝트 시작을 위해 새로운 폴더를 만들고 그곳에 Next Js 프로젝트를 하나 생성하겠다. 위의 이미지는 필자가 Next Js를 생성하면서 설정한 세팅이니 혹시참고하고 싶다면 참고하도록 하자 이렇게 세팅을 하면 아래의 이미지 처럼 폴더 구조가 나올텐데 이 상태에서 필요한 라이브러리들을 설치하도록 하고 사용하지 않는 파일들을 제거하겠다. 현재 사용하기로한 몇가지의 라이브러리를 설치한 package.json의 모습과 폴더구조이다 지금은 프로젝트를 진행하는 단계이니 이에 대해 따로 설명은 하지 않도록 하겠다. 이제 필요한 세팅이 끝났고 다음 포스팅 부터 생성형 ai를 이용하여 디자인을 받고 본격적으로 제…","fields":{"slug":"/next-shopProject1/"},"frontmatter":{"categories":"Next_JS","title":"Next Js 쇼핑몰 제작 프로젝트 첫 번째","date":"June 19, 2024"}},"next":{"fields":{"slug":"/next-SSG-ISG/"}},"previous":{"fields":{"slug":"/next-shopProject2/"}}},{"node":{"id":"27456462-6428-5440-ae4a-d36a3d9080e6","excerpt":"SSG와 ISR SSG( Static Site Generation )에 대하여 SSG는 정적인 페이지를 보여줄때 사용하기 좋은 방법으로 동적인 움직임이 없고 변경 되어야하는 정보가 없다면 SSG 방식을 이용하여 사이트를 제작하는 것이 가장 좋은 선택일것이다. SSG SSR과는 랜더링이 되는 타이밍이 다른 것이 특징이다.  SSG 장점 빌드시 미리 랜더링을 하여 빠른 사용자 경험을 제공할 수 있다. SSG 단점 마찬가지로 빌드시 미리 페이지를 모두 랜더링 하기 때문에 데이터를 fetching 하여도 다시 빌드하는 것이 아니라면 반영이 되지 않는다 ISR ( Incremental Static Regeneration )에 대하여 ISR은 따로 분류가 되어 있지만 사실은 SSG에 포함되어 있는 형태이며 SSG에서 데이터를 fetching 할 수 있도록 개선된 형태이다 ISR은 SSG에서 데이터를 fetching 하면 일정시간 마다 전체 페이지가 아닌 해당 페이지만을 다시 빌드하여 데이터를…","fields":{"slug":"/next-SSG-ISG/"},"frontmatter":{"categories":"Next_JS","title":"SSG와 ISR에 대하여","date":"June 16, 2024"}},"next":{"fields":{"slug":"/next-clintAndServerComponent/"}},"previous":{"fields":{"slug":"/next-shopProject1/"}}},{"node":{"id":"dc08f447-9e4d-5faa-92c4-ec179b9f4b8a","excerpt":"CSR SSR ISR SSG 이해하기 이번 포스팅은 그동안 타입 스크립트 부터 빠르게 포스팅 한다고 미뤄온 Next JS의 포스팅을 이어서 하겠다. CSR은 무엇인가 CSR( Client Side Rendering )은 리엑트나 vue를 다루어본 사람들이라면 누구나 한번씩은 들어 보았을 것이다. CSR 은 말 그대로 서버가 아닌 클라이언트( 사용자의 PC )에서 랜더링을 진행하는 것을 의미한다 전통적인 웹 브라우저의 동작 방식은 서버에서 랜더링을 진행하여 유저의 화면에 결과물과 js를 함께 보내주는 방식인데 CSR은 모든걸 유저에게 맡기는 것이다. 해당 이미지는 csr과 ssr의 차이를 나타낸 이미지이다 이미지에서 알 수 있듯 CSR은 HTML , CSS, JS를 모두 다운 받고 브라우저에서 랜더링을 진행한 후에 결과가 화면에 나타나는 것을 알 수 있다. 그럼 이런 방식에는 어떤 장점과 단점이 있을까? 장점 서버의 부하가 적어진다( 서버에서 랜더링을 하지 않음 ) 네이티브 앱과 같…","fields":{"slug":"/next-clintAndServerComponent/"},"frontmatter":{"categories":"Next_JS","title":"Next JS의 SSR CSR 차이점","date":"June 14, 2024"}},"next":{"fields":{"slug":"/typescript-infer/"}},"previous":{"fields":{"slug":"/next-SSG-ISG/"}}},{"node":{"id":"6e04b70e-74d9-55a8-a465-80c1f50c8643","excerpt":"🙄 SSR & CSR에 대하여 이번 포스팅은 Next JS의 SSR 및 CSR에 대한 글을 작성하고자 한다. 하지만 그전에 SSR과 CSR에 대해 가볍게 어떤 개념인지 알아보고 넘어가도록 하자 SSR이란? SSR은 Server-side-Rendering의 약자로 React,Vue와 같은 CSR과는 반대되는 개념이다. SSR은 서버에서 HTML,CSS,JS를 연결하고 랜더링 준비를 마치면 클라이언트에서는 이미 준비된 HTML을 받아 그대로 랜더링을 하는 것이다. CSR이란? CSR은 위의 SSR의 반대되는 개념으로 빈 HTML을 서버로 받아와 클라이언트에서 함께 받아온 JS 파일을 파싱하여 빈 HTML에 동적으로 삽입하여 만드는 방식이다. 😶 이런 방식에는 어떤 차이가 있을까? SSR과 CSR은 각각의 명확한 장단점을 가진다. 그 장단점은 아래와 같다. CSR 장점 View 렌더링을 브라우저에게 담당시킹으로 서버의 부하가 줄어든다. 네이티브 앱과 같은 경험을 제공한다.( 부드러운 페…","fields":{"slug":"/next-component/"},"frontmatter":{"categories":"Next_JS","title":"Next JS의 SSR CSR 설정 및 차이점","date":"May 26, 2024"}},"next":{"fields":{"slug":"/next-useImg/"}},"previous":{"fields":{"slug":"/typescript-setting/"}}},{"node":{"id":"bd212c49-bb1e-5f75-9410-d267e659c824","excerpt":"😽 NEXT JS 에서 제공하는 이미지 사용법 이번 포스팅은 Next Js에서 제공하는 이미지를 자동윽로 최적화해주는 패키지의 사용법에 대해 알아보겠다. 일반 이미지와 비슷한 사용 방법을 가지고 있으나 외부 이미지를 사용하려할때는 약간의 설정이 필요하니 그 부분만 조심하면 성능개선에 많은 도움이 될 것이다. Next Js의 Image 컴포넌트 사용법 이미지 최적화를 위해 Image를 사용하는 방법은 Next Js에서 Image라는 컴포넌트를 import해와서 사용하여야 하는데 아래와 같은 import 구문을 자신의 page.js 혹은 Layout.js에 추가하도록 하자 위와 같이 import한 뒤 해당 컴포넌트를 사용할곳에 적고 img 태그를 사용 하던 것 처럼 src 속성 및 alt 속성을 추가한다. 하지만 여기서 src 경로는 이미지와는 다르게 넣어야 하는데 img 태그는 src에 경로를 직접넣는 반면 Image 컴포넌트는 이미지를 import로 가져와서 import한 이미지를…","fields":{"slug":"/next-useImg/"},"frontmatter":{"categories":"Next_JS","title":"Next Js에서 제공하는 이미지 사용법","date":"May 25, 2024"}},"next":{"fields":{"slug":"/next-route/"}},"previous":{"fields":{"slug":"/next-component/"}}},{"node":{"id":"45064605-d538-5444-93fc-906b4d888752","excerpt":"🥸 Next Js에서 라우팅에 대하여 저번 포스팅에서는 Next JS의 각 폴더의 역할과 LayOut, Page 의 관계에 대해 간략하게 나마 알아보았는데 이번에는 리엑트를 하던 사람들은 많이 해보거나 들어보았을 라우팅 처리에 관한 내용으로 포스팅을 진행하고자 한다. 라우팅이란? 라우팅은 쉽게 말해서 사용자가 요청한 url에 맞는 페이지를 보여 줄 수 있도록 하는 로직을 말하는 것이다. 리엑트에서는 react-router-dom을 사용하는게 일반적이였지만 Next Js는 버전이 업그레이드 되면서 편리하게 라우팅 처리를 할 수 있도록 바뀌었다. ✍️ Next Js 14버전 이후의 라우팅 방법( 정적 라우팅 ) 우선 Next 14 버전 이상만 해당 라우팅 방법을 사용 할 수 있으며 만약 따라했는데 안 된다면 자신의 Next js의 버전이 14버전 이상인지 부터 확인하도록 하자 라우팅 경로 폴더 생성 우선 라우팅 경로를 설정하기 위해서는 page.js가 있는 파일에 로 감싸진 폴더를 하나…","fields":{"slug":"/next-route/"},"frontmatter":{"categories":"Next_JS","title":"Next JS에서 라우팅 하는법","date":"May 25, 2024"}},"next":{"fields":{"slug":"/next-folder/"}},"previous":{"fields":{"slug":"/next-useImg/"}}},{"node":{"id":"3f046e2e-2493-5c94-a344-0b0480f5ce44","excerpt":"👋Next Js 폴더의 역할에 대하여 이번 포스팅은 저번 포스팅에서 이야기 한 것 처럼 CNA를 통해 제작한 템플릿의 폴더가 각각 어떠한 역할을 하는지에 대해 알아보겠다. ✍️알아볼 폴더의 종류 우리가 알아볼 폴더의 구조는 아래의 이미지에서 보이듯 최상위의 파일과 app안의 파일들에 대해 알아 볼 것이다. ✨ 각 폴더의 역할 🎲 최상위 폴더 App : Next Js의 페이지를 구성하는 파일로 가장 상위의 파일이 app이라는 폴더이다 이곳에서 추가적인 라우팅 처리등을 하여 페이지를 생성한다. node_modules : npm or yarn과 같은 패키지 매니저를 이용하여 다운한 패키지들을 보관하는 폴더이다. public : 개발시 이미지 폰트등 정적인 요소들이 들어가는 파일이다 이곳에 들어가는 파일들은 번들링시 이름이 변경되지 않고 절대경로를 사용 할 수 있는 이점이있다. .gitignore : 이 파일은 github에 올라가면 안 되는 민감한 파일들을 등록하여 git을 이용하여 gi…","fields":{"slug":"/next-folder/"},"frontmatter":{"categories":"Next_JS","title":"Next JS의 각 폴더별 역할","date":"May 25, 2024"}},"next":{"fields":{"slug":"/next-createNext/"}},"previous":{"fields":{"slug":"/next-route/"}}},{"node":{"id":"818b2485-2d3e-5b3d-a1e5-7b1cf4976ea8","excerpt":"👋 이번 포스팅에 대하여 이 블로그의 첫 포스팅은 이전 블로그에서 적으려 했던 Next Js에 대한 주제로 계속 이어나갈까한다. 본래는 모든 내용을 여기로 옮기고 이 블로그를 계속 이어나갈까 생각도 하였지만 그러기에는 워낙 시간이 오래 걸릴 것 같아 velog의 내용을 이어가기로 결정하였다. 만일 이전 블로그의 글이 궁금하다면 위의 header 부분에 존재하는 PrevBlog를 보도록 하자 또한 Next JS에 대한 포스팅은 최종적으로 Mongoose를 이용하여 게시판을 제작하는 것을 목표로 계속 포스팅을 올릴 예정이다. ✍️ 시작하기 앞서 필요한 세팅 Next Js를 하기 위해서는 최신버전의 Node가 깔려 있는지 확인할 필요가 있으므로 cmd에 아래의 명령어를 입력하여 노드가 최신버전 18버전 이상인지 확인하도록 하자 ✨ CNA를 통한 Next Js 기본 템플릿 생성 이 블로그는 최대한 이론과 실습을 분리하여 진행할 예정이므로 방법을 설명할때는 최대한 이론을 베재하고 사용방법만을…","fields":{"slug":"/next-createNext/"},"frontmatter":{"categories":"Next_JS","title":"Next Js 개발환경 세팅","date":"May 21, 2024"}},"next":null,"previous":{"fields":{"slug":"/next-folder/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}