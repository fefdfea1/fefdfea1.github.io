{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"38d0b3e7-0bb6-5f20-b708-98f6873778e7","excerpt":"🐎타입스크립트에서 타입을 선언하는 2가지 방법 타입스크립트에서는 타입을 변수처럼 사용하기 위한 방법이 2가지가 있다. 2가지에는 큰 차이는 없으나 그 차이점에 대해서는 알아둘 필요는 있다 생각하여 함께 이번 포스팅에 함께 적도록 하겠다. 🐈‍⬛ 첫 번째 방법 type type은 interface가 나오기 이전부터 있던 타입의 선언 방법이다. 사용방법은 아래와 같다 이렇게만 보면 잘 이해가 안가니까 몇 가지의 예시를 들어보도록 하겠다. 이런식으로 자신이 원하는 이름과 타입을 형식에만 맞게 써주면 된다. 이렇게 만든 타입은 앞선 포스팅에서 사용했던 것 처럼 변수 오른쪽에 :을 붙여 사용 하면 된다. 🐯 두 번째 방법 interface interface는 타입을 정의하는 두번째 방법이며 type 다음으로 나온 최신 문법이기도 하다. interface의 사용 방법은 type과 거의 동일하여 특별히 어려운점은 없다. 위의 코드에서 이상함을 느낄 수 있는데 interface는 type과 다르게 …","fields":{"slug":"/typescript-type-Interface/"},"frontmatter":{"categories":"Typescript","title":"TypeScript 타입을 지정하는 2가지 방법","date":"May 29, 2024"}},"next":{"fields":{"slug":"/typescript-type/"}},"previous":null},{"node":{"id":"274324fe-4fb7-5b61-be18-f598da47ed3d","excerpt":"🙋‍♀️ 타입스크립트 타입의 종류 중요한가..? 이번 포스팅은 타입스크립트의 타입의 종류에 관한 포스팅이다. 당연한 말이지만 타입스크립트에서는 타입을 아는 것이 굉장히 중요하다 자신이 타입스크립트를 사용할때도 물론 중요하지만 요즘같이 대부분 타입스크립트를 프로젝트에 도입하는 추세에서는 다른사람의 코드를 읽기 위해서 사실상 타입스크립트를 아는 것은 반필수라고 생각한다. 물론 타입만 안다고 읽을 수 있을정도로 간단하지는 않지만 기본적인 타입과 union, any등을 모르면 읽을 엄두도 낼 수 없기에 이런 기초적인 타입일 수록 정말 중요하다. 👨‍🍼 타입스크립트의 타입의 종류 타입스크립트는 변수를 만들때 타입의 지정이 가능하다. 위의 코드는 값으로 string 형태의 값만을 받는다는 의미의 변수이다. 정말 간단하게 변수 : 타입 만약 다른 타입의 값을 대입하려고 시도한다면 에러를 띄우는 모습을 볼 수 있다. 형태로 지정만하면 쉽게 타입을 지정할 수 있고 변수의 이름도 직관적이기 때문에 금방 익힐…","fields":{"slug":"/typescript-type/"},"frontmatter":{"categories":"Typescript","title":"TypeScript의 타입 종류","date":"May 28, 2024"}},"next":{"fields":{"slug":"/typescript-setting/"}},"previous":{"fields":{"slug":"/typescript-type-Interface/"}}},{"node":{"id":"b3204537-2fea-5dee-b0d0-72b2c8610a58","excerpt":"😾 타입스크립트 기본 세팅 이번 포스팅은 리엑트에서 타입스크립트를 사용하는 방법에 대해 알아보도록 하겠다. 타입스크립트가 무엇인지는 알고 있다고 생각하고 진행할 예정이라 따로 타입스크립트에 관한 만들어지게 된 계기 같은건 설명하지 않고 이번에도 사용 방법을 위주로 쭉 포스팅을 하게 될 것이다. 리엑트에서 타입스크립트 세팅하는법 ( CRA로 간편하게 ) 이번 포트팅의 가장 핵심은 세팅하는 방법에 대해 알아보자 세팅은 CRA를 사용하여 기본적은 템플릿을 받아오는 방법을 사용할 것이다. (수동으로 하는 방법은 추후 업로드 예정) 리엑트에서 연습용 폴더 하나를 만들고 아래와 같이 입력하여 새로운 리엑트 템플릿을 생성하자.\r\n\r\n생성이 완료 되었다면 jsx 확장자가 아닌 컴포넌트 파일들이 모두 tsx 확장자로 바뀐 것을 확인 할 수 있을것이다. 성공시 파일 구조 😽 포스트를 마치며 다음 포스트는 타입스크립트의 타입에 관한 포스팅을 진행하도록 하겠다.","fields":{"slug":"/typescript-setting/"},"frontmatter":{"categories":"Typescript","title":"TypeScript 기본 세팅","date":"May 28, 2024"}},"next":{"fields":{"slug":"/next-clintAndServerComponent/"}},"previous":{"fields":{"slug":"/typescript-type/"}}},{"node":{"id":"dc08f447-9e4d-5faa-92c4-ec179b9f4b8a","excerpt":"","fields":{"slug":"/next-clintAndServerComponent/"},"frontmatter":{"categories":"Next_JS","title":"Next JS의 SSR CSR 설정 및 차이점","date":"May 27, 2024"}},"next":{"fields":{"slug":"/next-component/"}},"previous":{"fields":{"slug":"/typescript-setting/"}}},{"node":{"id":"6e04b70e-74d9-55a8-a465-80c1f50c8643","excerpt":"🙄 SSR & CSR에 대하여 이번 포스팅은 Next JS의 SSR 및 CSR에 대한 글을 작성하고자 한다. 하지만 그전에 SSR과 CSR에 대해 가볍게 어떤 개념인지 알아보고 넘어가도록 하자 SSR이란? SSR은 Server-side-Rendering의 약자로 React,Vue와 같은 CSR과는 반대되는 개념이다. SSR은 서버에서 HTML,CSS,JS를 연결하고 랜더링 준비를 마치면 클라이언트에서는 이미 준비된 HTML을 받아 그대로 랜더링을 하는 것이다. CSR이란? CSR은 위의 SSR의 반대되는 개념으로 빈 HTML을 서버로 받아와 클라이언트에서 함께 받아온 JS 파일을 파싱하여 빈 HTML에 동적으로 삽입하여 만드는 방식이다. 😶 이런 방식에는 어떤 차이가 있을까? SSR과 CSR은 각각의 명확한 장단점을 가진다. 그 장단점은 아래와 같다. CSR 장점 View 렌더링을 브라우저에게 담당시킹으로 서버의 부하가 줄어든다. 네이티브 앱과 같은 경험을 제공한다.( 부드러운 페…","fields":{"slug":"/next-component/"},"frontmatter":{"categories":"Next_JS","title":"Next JS의 SSR CSR 설정 및 차이점","date":"May 26, 2024"}},"next":{"fields":{"slug":"/next-useImg/"}},"previous":{"fields":{"slug":"/next-clintAndServerComponent/"}}},{"node":{"id":"bd212c49-bb1e-5f75-9410-d267e659c824","excerpt":"😽 NEXT JS 에서 제공하는 이미지 사용법 이번 포스팅은 Next Js에서 제공하는 이미지를 자동윽로 최적화해주는 패키지의 사용법에 대해 알아보겠다. 일반 이미지와 비슷한 사용 방법을 가지고 있으나 외부 이미지를 사용하려할때는 약간의 설정이 필요하니 그 부분만 조심하면 성능개선에 많은 도움이 될 것이다. Next Js의 Image 컴포넌트 사용법 이미지 최적화를 위해 Image를 사용하는 방법은 Next Js에서 Image라는 컴포넌트를 import해와서 사용하여야 하는데 아래와 같은 import 구문을 자신의 page.js 혹은 Layout.js에 추가하도록 하자 위와 같이 import한 뒤 해당 컴포넌트를 사용할곳에 적고 img 태그를 사용 하던 것 처럼 src 속성 및 alt 속성을 추가한다. 하지만 여기서 src 경로는 이미지와는 다르게 넣어야 하는데 img 태그는 src에 경로를 직접넣는 반면 Image 컴포넌트는 이미지를 import로 가져와서 import한 이미지를…","fields":{"slug":"/next-useImg/"},"frontmatter":{"categories":"Next_JS","title":"Next Js에서 제공하는 이미지 사용법","date":"May 25, 2024"}},"next":{"fields":{"slug":"/next-route/"}},"previous":{"fields":{"slug":"/next-component/"}}},{"node":{"id":"45064605-d538-5444-93fc-906b4d888752","excerpt":"🥸 Next Js에서 라우팅에 대하여 저번 포스팅에서는 Next JS의 각 폴더의 역할과 LayOut, Page 의 관계에 대해 간략하게 나마 알아보았는데 이번에는 리엑트를 하던 사람들은 많이 해보거나 들어보았을 라우팅 처리에 관한 내용으로 포스팅을 진행하고자 한다. 라우팅이란? 라우팅은 쉽게 말해서 사용자가 요청한 url에 맞는 페이지를 보여 줄 수 있도록 하는 로직을 말하는 것이다. 리엑트에서는 react-router-dom을 사용하는게 일반적이였지만 Next Js는 버전이 업그레이드 되면서 편리하게 라우팅 처리를 할 수 있도록 바뀌었다. ✍️ Next Js 14버전 이후의 라우팅 방법( 정적 라우팅 ) 우선 Next 14 버전 이상만 해당 라우팅 방법을 사용 할 수 있으며 만약 따라했는데 안 된다면 자신의 Next js의 버전이 14버전 이상인지 부터 확인하도록 하자 라우팅 경로 폴더 생성 우선 라우팅 경로를 설정하기 위해서는 page.js가 있는 파일에 로 감싸진 폴더를 하나…","fields":{"slug":"/next-route/"},"frontmatter":{"categories":"Next_JS","title":"Next JS에서 라우팅 하는법","date":"May 25, 2024"}},"next":{"fields":{"slug":"/next-folder/"}},"previous":{"fields":{"slug":"/next-useImg/"}}},{"node":{"id":"3f046e2e-2493-5c94-a344-0b0480f5ce44","excerpt":"👋Next Js 폴더의 역할에 대하여 이번 포스팅은 저번 포스팅에서 이야기 한 것 처럼 CNA를 통해 제작한 템플릿의 폴더가 각각 어떠한 역할을 하는지에 대해 알아보겠다. ✍️알아볼 폴더의 종류 우리가 알아볼 폴더의 구조는 아래의 이미지에서 보이듯 최상위의 파일과 app안의 파일들에 대해 알아 볼 것이다. ✨ 각 폴더의 역할 🎲 최상위 폴더 App : Next Js의 페이지를 구성하는 파일로 가장 상위의 파일이 app이라는 폴더이다 이곳에서 추가적인 라우팅 처리등을 하여 페이지를 생성한다. node_modules : npm or yarn과 같은 패키지 매니저를 이용하여 다운한 패키지들을 보관하는 폴더이다. public : 개발시 이미지 폰트등 정적인 요소들이 들어가는 파일이다 이곳에 들어가는 파일들은 번들링시 이름이 변경되지 않고 절대경로를 사용 할 수 있는 이점이있다. .gitignore : 이 파일은 github에 올라가면 안 되는 민감한 파일들을 등록하여 git을 이용하여 gi…","fields":{"slug":"/next-folder/"},"frontmatter":{"categories":"Next_JS","title":"Next JS의 각 폴더별 역할","date":"May 25, 2024"}},"next":{"fields":{"slug":"/next-createNext/"}},"previous":{"fields":{"slug":"/next-route/"}}},{"node":{"id":"818b2485-2d3e-5b3d-a1e5-7b1cf4976ea8","excerpt":"👋 이번 포스팅에 대하여 이 블로그의 첫 포스팅은 이전 블로그에서 적으려 했던 Next Js에 대한 주제로 계속 이어나갈까한다. 본래는 모든 내용을 여기로 옮기고 이 블로그를 계속 이어나갈까 생각도 하였지만 그러기에는 워낙 시간이 오래 걸릴 것 같아 velog의 내용을 이어가기로 결정하였다. 만일 이전 블로그의 글이 궁금하다면 위의 header 부분에 존재하는 PrevBlog를 보도록 하자 또한 Next JS에 대한 포스팅은 최종적으로 Mongoose를 이용하여 게시판을 제작하는 것을 목표로 계속 포스팅을 올릴 예정이다. ✍️ 시작하기 앞서 필요한 세팅 Next Js를 하기 위해서는 최신버전의 Node가 깔려 있는지 확인할 필요가 있으므로 cmd에 아래의 명령어를 입력하여 노드가 최신버전 18버전 이상인지 확인하도록 하자 ✨ CNA를 통한 Next Js 기본 템플릿 생성 이 블로그는 최대한 이론과 실습을 분리하여 진행할 예정이므로 방법을 설명할때는 최대한 이론을 베재하고 사용방법만을…","fields":{"slug":"/next-createNext/"},"frontmatter":{"categories":"Next_JS","title":"Next Js 개발환경 세팅","date":"May 21, 2024"}},"next":null,"previous":{"fields":{"slug":"/next-folder/"}}}],"categories":["All","Typescript","Next_JS"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}