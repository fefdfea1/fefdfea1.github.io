{"componentChunkName":"component---src-templates-blog-template-js","path":"/typescript-generic/","result":{"data":{"cur":{"id":"1a258859-5be1-5c1f-93e1-89133ffb34bc","html":"<h1 id=\"타입스크립트의-generic에-대하여\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-generic%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\" aria-label=\"타입스크립트의 generic에 대하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트의 Generic에 대하여</h1>\n<p>타입스크립트에는 타입을 고정적으로 지정하는 것 외에도 동적으로도 지정하는 방법이 존재한다. 사용방법은 어렵지 않으니 바로 코드를 보도록 하자</p>\n<h2 id=\"generic-기본-사용법\" style=\"position:relative;\"><a href=\"#generic-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"generic 기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generic 기본 사용법</h2>\n<p>타입스크립트 Generic의 기본 사용법은 사입을 만들때 &#x3C;>를 이용하여 변수의 이름을 작명하고 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type 제네릭타입<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> 제네릭타입<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 &#x3C;>를 이용하여 변수명을 작성하고 &#x3C;>를 제거하여 사용함으로서 변수를 사용한다고 생각하면 된다. 즉 위의 코드는 제네릭타입1이라는 타입에 T라는 변수를 받을 수 있도록 하고 number라는 값을 넘겨 사용하는 간단한 코드이다.</p>\n<blockquote>\n<p>타입에 값 넘기는법은 타입&#x3C;넘길 타입>의 형태로 값을 주면 된다.</p>\n</blockquote>\n<h2 id=\"함수에-적용\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\"함수에 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에 적용</h2>\n<p>이번에는 이를 함수에 적용해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> typeFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span> a<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  코드<span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntypeFn<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드처럼 기존의 타입에 적용하던 코드와 크게 차이는 없다. 함수의 이름 옆에 &#x3C;>를 이용하여 변수명을 작성하고 &#x3C;>를 제거한 이름만을 사용하여 해당 타입을의 값을 사용한다.</p>\n<h2 id=\"제네릭-2개-이상-사용\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-2%EA%B0%9C-%EC%9D%B4%EC%83%81-%EC%82%AC%EC%9A%A9\" aria-label=\"제네릭 2개 이상 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 2개 이상 사용</h2>\n<p>위의 코드들처럼 제네릭은 꼭 하나만 사용해야 하는 것은 아니라 마치 함수의 매개변수처럼 사용자가 원하는 만큼늘릴 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> typeFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span><span class=\"token constant\">J</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token constant\">J</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  코드<span class=\"token operator\">~</span><span class=\"token operator\">~</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntypeFn<span class=\"token operator\">&lt;</span>number<span class=\"token punctuation\">,</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>방법은 기존에 만들었던 제네릭칸에 추가로 작성하기만 하면 되어 간단하다.</p>","excerpt":"타입스크립트의 Generic에 대하여 타입스크립트에는 타입을 고정적으로 지정하는 것 외에도 동적으로도 지정하는 방법이 존재한다. 사용방법은 어렵지 않으니 바로 코드를 보도록 하자 Generic 기본 사용법 타입스크립트 Generic의 기본 사용법은 사입을 만들때 <>를 이용하여 변수의 이름을 작명하고 사용하면 된다. 위와 같이 <>를 이용하여 변수명을 작성하고 <>를 제거하여 사용함으로서 변수를 사용한다고 생각하면 된다. 즉 위의 코드는 제네릭타입1이라는 타입에 T라는 변수를 받을 수 있도록 하고 number라는 값을 넘겨 사용하는 간단한 코드이다. 타입에 값 넘기는법은 타입<넘길 타입>의 형태로 값을 주면 된다. 함수에 적용 이번에는 이를 함수에 적용해보자 위의 코드처럼 기존의 타입에 적용하던 코드와 크게 차이는 없다. 함수의 이름 옆에 <>를 이용하여 변수명을 작성하고 <>를 제거한 이름만을 사용하여 해당 타입을의 값을 사용한다. 제네릭 2개 이상 사용 위의 코드들처럼 제네릭은…","frontmatter":{"date":"June 04, 2024","title":"TypeScript Generic","categories":"Typescript","author":"fefdfea","emoji":"🍀"},"fields":{"slug":"/typescript-generic/"}},"next":{"id":"e86cc8a4-5ed7-5b75-8858-4d4e3bc216b0","html":"<h1 id=\"typescript-never타입\" style=\"position:relative;\"><a href=\"#typescript-never%ED%83%80%EC%9E%85\" aria-label=\"typescript never타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Never타입</h1>\n<p>이번 포스팅은 Never 타입에 대해 알아보도록 하겠다. Never은 any나 unknown과는 다른 타입으로 그 어떤 값도 가질 수 없는 타입이다. 이렇게 아무것도 가질 수 없도록 하는 타입은 어떤 경우에 사용해야 할까?</p>\n<blockquote>\n<p>any도 예외없이 Never에 사용 불가능하다</p>\n</blockquote>\n<h2 id=\"함수의-매개변수로-사용\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A1%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"함수의 매개변수로 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 매개변수로 사용</h2>\n<p>첫 번째로 함수의 매개변수의 타입을 never로 지정하여 값이 들어오는 경우를 방지 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> never</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 오직 `never` 만 받는다.</span>\r\ndeclare <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">myNever</span><span class=\"token operator\">:</span> never\r\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>myNever<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅</span>\r\n\r\n<span class=\"token comment\">// 아무 값이나 전달하거나 아무 값도 전달하지 않으면 타입 에러 발생</span>\r\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ❌ 인자 'input'에 아무 값도 주어지지 않음</span>\r\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ❌ 'number' 타입은 'never' 타입에 할당할 수 없음</span>\r\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ❌ '\bstring' 타입은 'never' 타입에 할당할 수 없음</span>\r\n\r\n<span class=\"token comment\">// `any`도 통과할 수 없다.</span>\r\ndeclare <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">myAny</span><span class=\"token operator\">:</span> any\r\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>myAny<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ❌ '\b\bany' 타입은 'never' 타입에 할당할 수 없음</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">unknownColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> never</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> never <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unknown color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntype Color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'green'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">getColorName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'red'</span><span class=\"token operator\">:</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'is red'</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'green'</span><span class=\"token operator\">:</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'is green'</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\r\n      <span class=\"token keyword\">return</span> <span class=\"token function\">unknownColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '\bstring' 타입은 'never' 타입에 할당할 수 없음</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"타이핑을-부분적으로-허용하지-않는다\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%84-%EB%B6%80%EB%B6%84%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%97%88%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"타이핑을 부분적으로 허용하지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타이핑을 부분적으로 허용하지 않는다.</h2>\n<p>만약 2가지의 타입을 가질 수 있는 매개변수가 있다고 가정해보자 그렇게 된다면 다음 코드와 같이 본래 의도와는 다르게 두 가지 중 하나가 아닌 둘다를 사용하는 경우가 생길 수동 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type VariantA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\ntype VariantB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\ndeclare <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arg</span><span class=\"token operator\">:</span> VariantA <span class=\"token operator\">|</span> VariantB</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입스크립트 컴파일러는 아무런 문제도 지적하지 않지만, 우리의 목적에는 맞지 않는다.</span></code></pre></div>\n<p>이를 막기위해 never를 사용하여 각각의 타입에 하나씩 객체를 추가하면 이런식으로 2가지 타입을 한번에 사용하는 것을 막을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type VariantA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> string\r\n    b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> never\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntype VariantB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> number\r\n    a<span class=\"token operator\">?</span><span class=\"token operator\">:</span> never\r\n<span class=\"token punctuation\">}</span>\r\n\r\ndeclare <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">arg</span><span class=\"token operator\">:</span> VariantA <span class=\"token operator\">|</span> VariantB</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\r\n\r\n\r\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ❌ 속성 'a'의 타입은 호환되지 않는다.</span></code></pre></div>\n<h2 id=\"유니언-타입에서-멤버-필터링\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EC%96%B8-%ED%83%80%EC%9E%85%EC%97%90%EC%84%9C-%EB%A9%A4%EB%B2%84-%ED%95%84%ED%84%B0%EB%A7%81\" aria-label=\"유니언 타입에서 멤버 필터링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니언 타입에서 멤버 필터링</h2>\n<p>never 타입은 유니언 타입이에 사용할시 그대로 사라진다. 하지만 이러한 특성을 이용해 제네릭을 이용하면 훌륭한 타입 필터링기를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">type Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span>\r\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntype Bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span>\r\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number\r\n<span class=\"token punctuation\">}</span>\r\n\r\ntype All <span class=\"token operator\">=</span> Foo <span class=\"token operator\">|</span> Bar\r\n\r\ntype ExtractTypeByName<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">G</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token constant\">G</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> never\r\n\r\ntype ExtractedType <span class=\"token operator\">=</span> ExtractTypeByName<span class=\"token operator\">&lt;</span>All<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token operator\">></span> <span class=\"token comment\">// 결과 타입은 Foo</span></code></pre></div>\n<p>이 코드를 보면 타입을 2개를 지정하고 All이라는 타입을 유니언 타입으로 지정한다 그 후 제네릭에 값과 함께 넘겨서 넘긴 값 ( 여기서는 foo )이 어떤 타입에 속하는지 반환 받을 수 있다. 만약 틀린 값을 넣는다면 never를 반환할 것이다.</p>","frontmatter":{"date":"June 03, 2024","title":"TypeScript Never에 대해","categories":"Typescript","author":"fefdfea","emoji":"🍓"},"fields":{"slug":"/typescript-never/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://fefdfea1.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/typescript-generic/","nextSlug":"/typescript-never/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}